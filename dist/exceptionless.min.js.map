{"version":3,"sources":["tracekit.js","/source/exceptionless.ts","exceptionless.min.js"],"names":["window","undefined","_has","object","key","Object","prototype","hasOwnProperty","call","_isUndefined","what","TraceKit","_oldTraceKit","_slice","slice","UNKNOWN_FUNCTION","noConflict","wrap","func","wrapped","apply","this","arguments","e","report","subscribe","handler","installGlobalHandler","handlers","push","unsubscribe","i","length","splice","notifyHandlers","stack","isWindowError","exception","collectWindowErrors","concat","inner","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","computeStackTrace","lastExceptionStack","augmentStackTraceWithInitialElement","lastException","location","line","column","guessFunctionName","context","gatherContext","mode","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","ex","args","s","setTimeout","incomplete","loadSource","remoteFetching","getXHR","XMLHttpRequest","ActiveXObject","request","open","send","responseText","getSource","sourceCache","source","domain","document","indexOf","split","m","reFunctionArgNames","reGuessFunction","maxLines","exec","linesBefore","Math","floor","linesOfContext","linesAfter","start","max","end","min","escapeRegExp","text","replace","escapeCodeAsRegExpForMatchingInsideHTML","body","findSourceInUrls","re","urls","j","join","substring","index","lastIndexOf","findSourceInLine","fragment","RegExp","findSourceByFunctionBody","parts","result","href","scripts","getElementsByTagName","code","codeRE","eventRE","script","src","name","event","computeStackTraceFromStackProp","element","chrome","gecko","winjs","lines","reference","isNative","columnNumber","computeStackTraceFromStacktraceProp","stacktrace","opera10Regex","opera11Regex","exc","computeStackTraceFromOperaMultiLineMessage","lineRE1","lineRE2","lineRE3","inlineScriptBlocks","item","relativeLine","pos","innerText","midline","stackInfo","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","functionName","funcs","recursion","curr","caller","toString","input","description","sourceURL","fileName","lineNumber","debug","computeStackTraceOfCaller","Error","ofCaller","extendToAsynchronousCallbacks","_helper","fnName","originalFn","originalCallback","global","root","factory","define","amd","exports","module","require","exceptionless","getDefaultsSettingsFromScriptTag","Utils","parseQueryString","pop","processUnhandledException","stackTrace","options","builder","ExceptionlessClient","createUnhandledException","status","pluginContextData","submit","processJQueryAjaxError","xhr","settings","error","client","submitNotFound","err","setSource","setProperty","data","SettingsManager","_handlers","onChanged","version","config","log","info","isNaN","savedConfigVersion","updateSettings","_this","isValid","submissionClient","getSettings","response","success","merge","savedServerSettings","getSavedServerSettings","path","_configPath","storage","save","settingsVersion","changed","DefaultLastReferenceIdManager","_lastReferenceId","getLast","clearLast","setLast","eventId","ConsoleLog","warn","level","console","NullLog","EventPluginContext","contextData","ContextData","defineProperty","get","enumerable","configurable","EventPluginManager","run","callback","plugin","next","cancelled","plugins","wrappedPlugins","priority","addDefaultPlugins","addPlugin","ConfigurationDefaultsPlugin","ErrorPlugin","ModuleInfoPlugin","RequestInfoPlugin","EnvironmentInfoPlugin","SubmissionMethodPlugin","ReferenceIdPlugin","reference_id","type","guid","DefaultEventQueue","_processingQueue","_config","enqueue","ensureQueueTimer","areQueuedItemsDiscarded","Date","toJSON","randomNumber","process","getEvents","events","items","value","queueNotProcessed","enabled","getList","submissionBatchSize","serverUrl","postEvents","processSubmissionResponse","suspendProcessing","noSubmission","removeEvents","serviceUnavailable","paymentRequired","unableToAuthenticate","notFound","badRequest","requestEntityTooLarge","round","_queueTimer","setInterval","onProcessQueue","isQueueProcessingSuspended","durationInMinutes","discardFutureQueuedItems","clearQueue","_suspendProcessingUntil","getTime","_discardQueuedItemsUntil","remove","InMemoryStorage","maxItems","_items","_maxItems","created","shift","searchPattern","limit","regex","results","test","addRange","target","values","_i","getHashCode","hash","character","charCodeAt","getCookies","cookies","cookie","s4","random","defaultValues","parseVersion","versionRegex","matches","query","pairs","pair","decodeURIComponent","stringify","exclusions","checkForMatch","pattern","trim","toLowerCase","startsWithWildcard","endsWithWildcard","stringifyImpl","cache","JSON","parse","Configuration","configSettings","inject","fn","defaultTags","defaultData","lastReferenceIdManager","_serverUrl","_dataExclusions","_plugins","defaults","apiKey","environmentInfoCollector","errorParser","moduleCollector","requestInfoCollector","queue","applySavedServerSettings","_apiKey","set","addDataExclusions","sort","p1","p2","pluginOrName","pluginAction","pluginExists","removePlugin","setVersion","setUserIdentity","userInfoOrIdentity","USER_KEY","userInfo","identity","shouldRemove","useReferenceIds","useDebugLogger","_defaultSettings","EventBuilder","_validIdentifierErrorMessage","setType","setSessionId","sessionId","isValidIdentifier","session_id","setReferenceId","referenceId","setMessage","setGeo","latitude","longitude","geo","setValue","addTags","tags","markAsCritical","critical","addRequestInfo","submitEvent","isDigit","isLetter","isMinus","setException","getException","markAsUnhandledError","setSubmissionMethod","method","getSubmissionMethod","SubmissionResponse","statusCode","settingsOrApiKey","createException","createEvent","submitException","submissionMethod","submitUnhandledException","createFeatureUsage","feature","submitFeatureUsage","createLog","sourceOrMessage","callee","submitLog","createNotFound","resource","createSessionStart","submitSessionStart","createSessionEnd","submitSessionEnd","date","ev","updateUserEmailAndDescription","email","userDescription","email_address","postUserDescription","getLastReferenceId","_instance","tag","ERROR_KEY","parser","collector","modules","getModules","REQUEST_KEY","requestInfo","getRequestInfo","ENVIRONMENT_KEY","environmentInfo","getEnvironmentInfo","SettingsResponse","DefaultErrorParser","getParameters","parameters","params","getStackFrames","stackFrames","ANONYMOUS","frames","frame","file_name","line_number","TRACEKIT_STACK_TRACE_KEY","stack_trace","DefaultModuleCollector","module_id","innerHTML","DefaultRequestInfoCollector","navigator","user_agent","userAgent","is_secure","protocol","host","hostname","port","parseInt","pathname","query_string","search","referrer","DefaultSubmissionClient","configurationVersionHeader","sendRequest","dataExclusions","headers","checkVersion","encodeURIComponent","complete","parseResponseHeaders","headerStr","headerPairs","headerPair","separator","isCompleted","statusText","TIMEOUT","LOADED","responseBody","getAllResponseHeaders","createRequest","WITH_CREDENTIALS","setRequestHeader","XDomainRequest","useSetTimeout","timeout","onreadystatechange","readyState","onprogress","ontimeout","onload","$","ajaxError","stackTraceLimit","Infinity"],"mappings":"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","file":"exceptionless.min.js","sourcesContent":["/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (errorObj) {\n          stack = TraceKit.computeStackTrace(errorObj);\n        }\n        else\n        {\n            if (lastExceptionStack) {\n                TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n                stack = lastExceptionStack;\n                lastExceptionStack = null;\n                lastException = null;\n            } else {\n                var location = {\n                    'url': url,\n                    'line': lineNo,\n                    'column': columnNo\n                };\n                location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n                location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n                stack = {\n                    'mode': 'onerror',\n                    'message': message,\n                    'stack': [location]\n                };\n            }\n        }\n\n        notifyHandlers(stack, 'from window.onerror');\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler ()\n    {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n                var s = lastExceptionStack;\n                lastExceptionStack = null;\n                lastException = null;\n                notifyHandlers.apply(null, [s, null].concat(args));\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                lastExceptionStack = null;\n                lastException = null;\n                notifyHandlers.apply(null, [stack, null].concat(args));\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|http|https):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = winjs.exec(lines[i]))) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n","export interface IEvent {\r\n  type?:string;\r\n  source?:string;\r\n  date?:Date;\r\n  tags?:string[];\r\n  message?:string;\r\n  geo?:string;\r\n  value?:number;\r\n  data?:any;\r\n  reference_id?:string;\r\n  session_id?:string;\r\n}\r\n\nexport interface ILastReferenceIdManager {\r\n  getLast(): string;\r\n  clearLast(): void;\r\n  setLast(eventId:string): void;\r\n}\r\n\nexport interface ILog {\r\n  info(message:string):void;\r\n  warn(message:string):void;\r\n  error(message:string):void;\r\n}\r\n\n                                          \r\n\r\nexport interface IEventQueue {\r\n  enqueue(event:IEvent):void;\r\n  process():void;\r\n  suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean):void;\r\n}\r\n\n                                                                                                                                   \r\n\r\nexport interface IEnvironmentInfoCollector {\r\n  getEnvironmentInfo(context:EventPluginContext):IEnvironmentInfo;\r\n}\r\n\n                                                                                                               \r\n\r\nexport interface IErrorParser {\r\n  parse(context:EventPluginContext, exception:Error): IError;\r\n}\r\n\n                                                                                                                 \r\n\r\nexport interface IModuleCollector {\r\n  getModules(context:EventPluginContext):IModule[];\r\n}\r\n\n                                                                                                                           \r\n\r\nexport interface IRequestInfoCollector {\r\n  getRequestInfo(context:EventPluginContext):IRequestInfo;\r\n}\r\n\n                                              \r\n\r\nexport interface IStorage<T> {\r\n  save(path:string, value:T):boolean;\r\n  get(path:string):T;\r\n  getList(searchPattern?:string, limit?:number):IStorageItem<T>[];\r\n  remove(path:string):void;\r\n}\r\n\n                                                                                                                                                                                                                                                                                               \r\n\r\nexport interface ISubmissionClient {\r\n  postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void):void;\r\n  postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void;\r\n  getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void;\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             \r\n\r\nexport interface IConfigurationSettings {\r\n  apiKey?:string;\r\n  serverUrl?:string;\r\n  environmentInfoCollector?:IEnvironmentInfoCollector;\r\n  errorParser?:IErrorParser;\r\n  lastReferenceIdManager?:ILastReferenceIdManager;\r\n  log?:ILog;\r\n  moduleCollector?:IModuleCollector;\r\n  requestInfoCollector?:IRequestInfoCollector;\r\n  submissionBatchSize?:number;\r\n  submissionClient?:ISubmissionClient;\r\n  storage?:IStorage<any>;\r\n  queue?:IEventQueue;\r\n}\r\n\n                                                                                                                                                     \r\n\r\nexport class SettingsManager {\r\n  /**\r\n   * The configuration settings path.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private static _configPath:string = 'ex-server-settings.json';\r\n\r\n  /**\r\n   * A list of handlers that will be fired when the settings change.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private static _handlers:{ (config:Configuration):void }[] = [];\r\n\r\n  private static changed(config:Configuration) {\r\n    var handlers = this._handlers; // optimization for minifier.\r\n    for (var index = 0; index < handlers.length; index++) {\r\n      handlers[index](config);\r\n    }\r\n  }\r\n\r\n  public static onChanged(handler:(config:Configuration) => void) {\r\n    !!handler && this._handlers.push(handler);\r\n  }\r\n\r\n  public static applySavedServerSettings(config:Configuration):void {\r\n    config.log.info('Applying saved settings.');\r\n    config.settings = Utils.merge(config.settings, this.getSavedServerSettings(config));\r\n    this.changed(config);\r\n  }\r\n\r\n  private static getSavedServerSettings(config:Configuration):Object {\r\n    return config.storage.get(this._configPath) || {};\r\n  }\r\n\r\n  public static checkVersion(version:number, config:Configuration):void {\r\n    if (version) {\r\n      var savedConfigVersion = parseInt(<string>config.storage.get(`${this._configPath}-version`));\r\n      if (isNaN(savedConfigVersion) || version > savedConfigVersion) {\r\n        config.log.info(`Updating settings from v${(!isNaN(savedConfigVersion) ? savedConfigVersion : 0)} to v${version}`);\r\n        this.updateSettings(config);\r\n      }\r\n    }\r\n  }\r\n\r\n  public static updateSettings(config:Configuration):void {\r\n    if (!config.isValid) {\r\n      config.log.error('Unable to update settings: ApiKey is not set.');\r\n      return;\r\n    }\r\n\r\n    config.submissionClient.getSettings(config, (response:SettingsResponse) => {\r\n      if (!response || !response.success || !response.settings) {\r\n        return;\r\n      }\r\n\r\n      config.settings = Utils.merge(config.settings, response.settings);\r\n\r\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\r\n      // Remove any existing server settings that are not in the new server settings.\r\n      var savedServerSettings = SettingsManager.getSavedServerSettings(config);\r\n      for (var key in savedServerSettings) {\r\n        if (response.settings[key]) {\r\n          continue;\r\n        }\r\n\r\n        delete config.settings[key];\r\n      }\r\n\r\n      var path = SettingsManager._configPath; // optimization for minifier.\r\n      config.storage.save(`${path}-version`, response.settingsVersion);\r\n      config.storage.save(path, response.settings);\r\n\r\n      config.log.info('Updated settings');\r\n      this.changed(config);\r\n    });\r\n  }\r\n}\r\n\n                                                                    \r\n\r\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\r\n  /**\r\n   * Gets the last event's reference id that was submitted to the server.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _lastReferenceId:string = null;\r\n\r\n  /**\r\n   * Gets the last event's reference id that was submitted to the server.\r\n   * @returns {string}\r\n   */\r\n  getLast(): string {\r\n    return this._lastReferenceId;\r\n  }\r\n\r\n  /**\r\n   * Clears the last event's reference id.\r\n   */\r\n  clearLast():void {\r\n    this._lastReferenceId = null;\r\n  }\r\n\r\n  /**\r\n   * Sets the last event's reference id.\r\n   * @param eventId\r\n   */\r\n  setLast(eventId:string):void {\r\n    this._lastReferenceId = eventId;\r\n  }\r\n}\r\n\n                              \r\n\r\nexport class ConsoleLog implements ILog {\r\n  public info(message:string):void {\r\n    this.log('info', message);\r\n  }\r\n\r\n  public warn(message:string):void {\r\n    this.log('warn', message);\r\n  }\r\n\r\n  public error(message:string):void {\r\n    this.log('error', message);\r\n  }\r\n\r\n  private log(level:string, message:string) {\r\n    if (console && console[level]) {\r\n      console[level](`[${level}] Exceptionless: ${message}`);\r\n    }\r\n  }\r\n}\r\n\n                              \r\n\r\nexport class NullLog implements ILog {\r\n  public info(message:string):void {}\r\n  public warn(message:string):void {}\r\n  public error(message:string):void {}\r\n}\r\n\nexport interface IUserInfo {\r\n  identity?:string;\r\n  name?:string;\r\n  data?:any;\r\n}\r\n\n                                                                                                          \r\n\r\nexport interface IEventPlugin {\r\n  priority?:number;\r\n  name?:string;\r\n  run(context:EventPluginContext, next?:() => void): void;\r\n}\r\n\n                                                                                                                                                                                                                                                \r\n\r\nexport class EventPluginContext {\r\n  public cancelled:boolean;\r\n  public client:ExceptionlessClient;\r\n  public event:IEvent;\r\n  public contextData:ContextData;\r\n\r\n  constructor(client:ExceptionlessClient, event:IEvent, contextData?:ContextData) {\r\n    this.client = client;\r\n    this.event = event;\r\n    this.contextData = contextData ? contextData : new ContextData();\r\n  }\r\n\r\n  public get log(): ILog {\r\n    return this.client.config.log;\r\n  }\r\n}\r\n\nr\n\r\nexport class EventPluginManager {\r\n  public static run(context:EventPluginContext, callback:(context?:EventPluginContext) => void): void {\r\n    var wrap = function (plugin:IEventPlugin, next?:() => void): () => void {\r\n      return () => {\r\n        try {\r\n          if (!context.cancelled) {\r\n            plugin.run(context, next);\r\n          }\r\n        } catch (ex) {\r\n          context.cancelled = true;\r\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\r\n        }\r\n\r\n        if (context.cancelled && !!callback) {\r\n          callback(context);\r\n        }\r\n      };\r\n    };\r\n\r\n    var plugins:IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\r\n    var wrappedPlugins:{ (): void }[] = [];\r\n    if (!!callback) {\r\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\r\n    }\r\n\r\n    for (var index = plugins.length - 1; index > -1; index--) {\r\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\r\n    }\r\n\r\n    wrappedPlugins[0]();\r\n  }\r\n\r\n  public static addDefaultPlugins(config:Configuration): void {\r\n    config.addPlugin(new ConfigurationDefaultsPlugin());\r\n    config.addPlugin(new ErrorPlugin());\r\n    config.addPlugin(new ModuleInfoPlugin());\r\n    config.addPlugin(new RequestInfoPlugin());\r\n    config.addPlugin(new EnvironmentInfoPlugin());\r\n    config.addPlugin(new SubmissionMethodPlugin());\r\n  }\r\n}\r\n\n                                                                                                                                                  \r\n\r\nexport class ReferenceIdPlugin implements IEventPlugin {\r\n  public priority:number = 20;\r\n  public name:string = 'ReferenceIdPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\r\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                    \r\n\r\nexport class DefaultEventQueue implements IEventQueue {\r\n  /**\r\n   * The configuration object.\r\n   * @type {Configuration}\r\n   * @private\r\n   */\r\n  private _config:Configuration;\r\n\r\n  /**\r\n   * Suspends processing until the specified time.\r\n   * @type {Date}\r\n   * @private\r\n   */\r\n  private _suspendProcessingUntil:Date;\r\n\r\n  /**\r\n   * Discards queued items until the specified time.\r\n   * @type {Date}\r\n   * @private\r\n   */\r\n  private _discardQueuedItemsUntil:Date;\r\n\r\n  /**\r\n   * Returns true if the queue is processing.\r\n   * @type {boolean}\r\n   * @private\r\n   */\r\n  private _processingQueue:boolean = false;\r\n\r\n  /**\r\n   * Processes the queue every xx seconds.\r\n   * @type {Timer}\r\n   * @private\r\n   */\r\n  private _queueTimer:any;\r\n\r\n  constructor(config:Configuration) {\r\n    this._config = config;\r\n  }\r\n\r\n  public enqueue(event:IEvent): void {\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n    this.ensureQueueTimer();\r\n\r\n    if (this.areQueuedItemsDiscarded()) {\r\n      config.log.info('Queue items are currently being discarded. The event will not be queued.');\r\n      return;\r\n    }\r\n\r\n    var key = `ex-q-${new Date().toJSON()}-${Utils.randomNumber()}`;\r\n    config.log.info(`Enqueuing event: ${key} type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`);\r\n    config.storage.save(key, event);\r\n  }\r\n\r\n  public process(): void {\r\n    function getEvents(events:{ path:string, value:IEvent }[]):IEvent[] {\r\n      var items:IEvent[] = [];\r\n      for (var index = 0; index < events.length; index++) {\r\n        items.push(events[index].value);\r\n      }\r\n\r\n      return items;\r\n    }\r\n\r\n    const queueNotProcessed:string = 'The queue will not be processed.'; // optimization for minifier.\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n    var log:ILog = config.log; // Optimization for minifier.\r\n\r\n    this.ensureQueueTimer();\r\n\r\n    if (this._processingQueue) {\r\n      return;\r\n    }\r\n\r\n    log.info('Processing queue...');\r\n    if (!config.enabled) {\r\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\r\n      return;\r\n    }\r\n\r\n    if (!config.isValid) {\r\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\r\n      return;\r\n    }\r\n\r\n    this._processingQueue = true;\r\n\r\n    try {\r\n      var events = config.storage.getList('ex-q', config.submissionBatchSize);\r\n      if (!events || events.length == 0) {\r\n        this._processingQueue = false;\r\n        return;\r\n      }\r\n\r\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\r\n      config.submissionClient.postEvents(getEvents(events), config, (response:SubmissionResponse) => {\r\n        this.processSubmissionResponse(response, events);\r\n        log.info('Finished processing queue.');\r\n        this._processingQueue = false;\r\n      });\r\n    } catch (ex) {\r\n      log.error(`Error processing queue: ${ex}`);\r\n      this.suspendProcessing();\r\n      this._processingQueue = false;\r\n    }\r\n  }\r\n\r\n  private processSubmissionResponse(response:SubmissionResponse, events:{ path:string, value:IEvent }[]): void {\r\n    const noSubmission:string = 'The event will not be submitted.'; // Optimization for minifier.\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n    var log:ILog = config.log; // Optimization for minifier.\r\n\r\n    if (response.success) {\r\n      log.info(`Sent ${events.length} events.`);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.serviceUnavailable) {\r\n      // You are currently over your rate limit or the servers are under stress.\r\n      log.error('Server returned service unavailable.');\r\n      this.suspendProcessing();\r\n      return;\r\n    }\r\n\r\n    if (response.paymentRequired) {\r\n      // If the organization over the rate limit then discard the event.\r\n      log.info('Too many events have been submitted, please upgrade your plan.');\r\n      this.suspendProcessing(null, true, true);\r\n      return;\r\n    }\r\n\r\n    if (response.unableToAuthenticate) {\r\n      // The api key was suspended or could not be authorized.\r\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\r\n      this.suspendProcessing(15);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.notFound || response.badRequest) {\r\n      // The service end point could not be found.\r\n      log.error(`Error while trying to submit data: ${response.message}`);\r\n      this.suspendProcessing(60 * 4);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.requestEntityTooLarge) {\r\n      var message = 'Event submission discarded for being too large.';\r\n      if (config.submissionBatchSize > 1) {\r\n        log.error(`${message} Retrying with smaller batch size.`);\r\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\r\n      } else {\r\n        log.error(`${message} ${noSubmission}`);\r\n        this.removeEvents(events);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!response.success) {\r\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\r\n      this.suspendProcessing();\r\n    }\r\n  }\r\n\r\n  private ensureQueueTimer(): void {\r\n    if (!this._queueTimer) {\r\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\r\n    }\r\n  }\r\n\r\n  private onProcessQueue(): void {\r\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\r\n      this.process();\r\n    }\r\n  }\r\n\r\n  public suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean): void {\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n\r\n    if (!durationInMinutes || durationInMinutes <= 0) {\r\n      durationInMinutes = 5;\r\n    }\r\n\r\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\r\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\r\n\r\n    if (discardFutureQueuedItems) {\r\n      this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\r\n    }\r\n\r\n    if (clearQueue) {\r\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\r\n      this.removeEvents(config.storage.getList('ex-q'));\r\n    }\r\n  }\r\n\r\n  private removeEvents(events:{ path:string, value:IEvent }[]) {\r\n    for (var index = 0; index < (events || []).length; index++) {\r\n      this._config.storage.remove(events[index].path);\r\n    }\r\n  }\r\n\r\n  private isQueueProcessingSuspended(): boolean {\r\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\r\n  }\r\n\r\n  private areQueuedItemsDiscarded(): boolean {\r\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\r\n  }\r\n}\r\n\n                                                                                                                                  \r\n\r\nexport class InMemoryStorage<T> implements IStorage<T> {\r\n  private _items:IStorageItem<T>[] = [];\r\n  private _maxItems:number;\r\n\r\n  constructor(maxItems?:number) {\r\n    this._maxItems = maxItems > 0 ? maxItems : 250;\r\n  }\r\n\r\n  public save(path:string, value:T):boolean {\r\n    if (!path || !value) {\r\n      return false;\r\n    }\r\n\r\n    this.remove(path);\r\n    if (this._items.push({ created: new Date().getTime(), path: path, value: value }) > this._maxItems) {\r\n      this._items.shift();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public get(path:string):T {\r\n    var item:IStorageItem<T> = path ? this.getList(`^${path}$`, 1)[0] : null;\r\n    return item ? item.value : null;\r\n  }\r\n\r\n  public getList(searchPattern?:string, limit?:number):IStorageItem<T>[] {\r\n    var items = this._items; // Optimization for minifier\r\n    if (!searchPattern) {\r\n      return items.slice(0, limit);\r\n    }\r\n\r\n    var regex = new RegExp(searchPattern);\r\n    var results:IStorageItem<T>[] = [];\r\n    for (var index = 0; index < items.length; index++) {\r\n      if (regex.test(items[index].path)) {\r\n        results.push(items[index]);\r\n\r\n        if (results.length >= limit) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public remove(path:string):void {\r\n    if (path) {\r\n      var item = this.getList(`^${path}$`, 1)[0];\r\n      if (item) {\r\n        this._items.splice(this._items.indexOf(item), 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n                                                 \r\n\r\nexport class Utils {\r\n  public static addRange<T>(target:T[], ...values:T[]) {\r\n    if (!target) {\r\n      target = [];\r\n    }\r\n\r\n    if (!values || values.length === 0) {\r\n      return target;\r\n    }\r\n\r\n    for (var index = 0; index < values.length; index++) {\r\n      if (values[index] && target.indexOf(values[index]) < 0) {\r\n        target.push(values[index]);\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public static getHashCode(source:string): string {\r\n    if (!source || source.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var hash:number = 0;\r\n    for (var index = 0; index < source.length; index++) {\r\n      var character   = source.charCodeAt(index);\r\n      hash  = ((hash << 5) - hash) + character;\r\n      hash |= 0;\r\n    }\r\n\r\n    return hash.toString();\r\n  }\r\n\r\n  public static getCookies(cookies:string): Object {\r\n    var result:Object = {};\r\n\r\n    var parts:string[] = (cookies || '').split('; ');\r\n    for (var index = 0; index < parts.length; index++) {\r\n      var cookie:string[] = parts[index].split('=');\r\n      result[cookie[0]] = cookie[1];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static guid(): string {\r\n    function s4() {\r\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n    }\r\n\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n  }\r\n\r\n  public static merge(defaultValues:Object, values:Object) {\r\n    var result:Object = {};\r\n\r\n    for (var key in defaultValues || {}) {\r\n      if (!!defaultValues[key]) {\r\n        result[key] = defaultValues[key];\r\n      }\r\n    }\r\n\r\n    for (var key in values || {}) {\r\n      if (!!values[key]) {\r\n        result[key] = values[key];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static parseVersion(source:string): string {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n\r\n    var versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\r\n    var matches = versionRegex.exec(source);\r\n    if (matches && matches.length > 0) {\r\n      return matches[0];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static parseQueryString(query:string) {\r\n    if (!query || query.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var pairs:string[] = query.split('&');\r\n    if (pairs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var result:Object = {};\r\n    for (var index = 0; index < pairs.length; index++) {\r\n      var pair = pairs[index].split('=');\r\n      result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static randomNumber(): number {\r\n    return Math.floor(Math.random() * 9007199254740992);\r\n  }\r\n\r\n  public static stringify(data:any, exclusions?:string[]): string {\r\n    function checkForMatch(pattern:string, value:string): boolean {\r\n      if (!pattern || !value || typeof value !== 'string') {\r\n        return false;\r\n      }\r\n\r\n      var trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\r\n      pattern = pattern.toLowerCase().replace(trim, '');\r\n      value = value.toLowerCase().replace(trim, '');\r\n\r\n      if (pattern.length <= 0) {\r\n        return false;\r\n      }\r\n\r\n      var startsWithWildcard:boolean = pattern[0] === '*';\r\n      if (startsWithWildcard) {\r\n        pattern = pattern.slice(1);\r\n      }\r\n\r\n      var endsWithWildcard:boolean = pattern[pattern.length - 1] === '*';\r\n      if (endsWithWildcard) {\r\n        pattern = pattern.substring(0, pattern.length - 1);\r\n      }\r\n\r\n      if (startsWithWildcard && endsWithWildcard)\r\n        return value.indexOf(pattern) !== -1;\r\n\r\n      if (startsWithWildcard)\r\n        return value.lastIndexOf(pattern) === (value.length - pattern.length);\r\n\r\n      if (endsWithWildcard)\r\n        return value.indexOf(pattern) === 0;\r\n\r\n      return value === pattern;\r\n    }\r\n\r\n    function stringifyImpl(data:any, exclusions:string[]): string {\r\n      var cache:string[] = [];\r\n      return JSON.stringify(data, function(key:string, value:any) {\r\n        for (var index = 0; index < (exclusions || []).length; index++) {\r\n          if (checkForMatch(exclusions[index], key)){\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (typeof value === 'object' && !!value) {\r\n          if (cache.indexOf(value) !== -1) {\r\n            // Circular reference found, discard key\r\n            return;\r\n          }\r\n\r\n          cache.push(value);\r\n        }\r\n\r\n        return value;\r\n      });\r\n    }\r\n\r\n    if (({}).toString.call(data) === '[object Array]') {\r\n      var result = [];\r\n      for (var index = 0; index < data.length; index++) {\r\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions || []));\r\n      }\r\n\r\n      return JSON.stringify(result);\r\n    }\r\n\r\n    return stringifyImpl(data, exclusions || []);\r\n  }\r\n}\r\n\nr\n\r\nexport class Configuration implements IConfigurationSettings {\r\n  /**\r\n   * A default list of tags that will automatically be added to every\r\n   * report submitted to the server.\r\n   *\r\n   * @type {Array}\r\n   */\r\n  public defaultTags:string[] = [];\r\n\r\n  /**\r\n   * A default list of of extended data objects that will automatically\r\n   * be added to every report submitted to the server.\r\n   *\r\n   * @type {{}}\r\n   */\r\n  public defaultData:Object = {};\r\n\r\n  /**\r\n   * Whether the client is currently enabled or not. If it is disabled,\r\n   * submitted errors will be discarded and no data will be sent to the server.\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  public enabled:boolean = true;\r\n\r\n  public environmentInfoCollector:IEnvironmentInfoCollector;\r\n  public errorParser:IErrorParser;\r\n  public lastReferenceIdManager:ILastReferenceIdManager = new DefaultLastReferenceIdManager();\r\n  public log:ILog;\r\n  public moduleCollector:IModuleCollector;\r\n  public requestInfoCollector:IRequestInfoCollector;\r\n\r\n  /**\r\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\r\n   */\r\n  public submissionBatchSize:number;\r\n  public submissionClient:ISubmissionClient;\r\n\r\n  /**\r\n   * Contains a dictionary of custom settings that can be used to control\r\n   * the client and will be automatically updated from the server.\r\n   */\r\n  public settings:Object = {};\r\n\r\n  public storage:IStorage<Object>;\r\n\r\n  public queue:IEventQueue;\r\n\r\n  constructor(configSettings?:IConfigurationSettings) {\r\n    function inject(fn:any) {\r\n      return typeof fn === 'function' ? fn(this) : fn;\r\n    }\r\n\r\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\r\n\r\n    this.log = inject(configSettings.log) || new NullLog();\r\n    this.apiKey = configSettings.apiKey;\r\n    this.serverUrl = configSettings.serverUrl;\r\n\r\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\r\n    this.errorParser = inject(configSettings.errorParser);\r\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\r\n    this.moduleCollector = inject(configSettings.moduleCollector);\r\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\r\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\r\n    this.submissionClient = inject(configSettings.submissionClient);\r\n    this.storage = inject(configSettings.storage) || new InMemoryStorage<any>();\r\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\r\n\r\n    SettingsManager.applySavedServerSettings(this);\r\n    EventPluginManager.addDefaultPlugins(this);\r\n  }\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _apiKey:string;\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @returns {string}\r\n   */\r\n  public get apiKey():string {\r\n    return this._apiKey;\r\n  }\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @param value\r\n   */\r\n  public set apiKey(value:string) {\r\n    this._apiKey = value || null;\r\n    this.log.info(`apiKey: ${this._apiKey}`);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the apiKey is valid.\r\n   * @returns {boolean}\r\n   */\r\n  public get isValid():boolean {\r\n    return !!this.apiKey && this.apiKey.length >= 10;\r\n  }\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _serverUrl:string = 'https://collector.exceptionless.io';\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @returns {string}\r\n   */\r\n  public get serverUrl():string {\r\n    return this._serverUrl;\r\n  }\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @param value\r\n   */\r\n  public set serverUrl(value:string) {\r\n    if (!!value) {\r\n      this._serverUrl = value;\r\n      this.log.info(`serverUrl: ${this._serverUrl}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A list of exclusion patterns.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _dataExclusions:string[] = [];\r\n\r\n  /**\r\n   *  A list of exclusion patterns that will automatically remove any data that\r\n   *  matches them from any data submitted to the server.\r\n   *\r\n   *  For example, entering CreditCard will remove any extended data properties,\r\n   *  form fields, cookies and query parameters from the report.\r\n   *\r\n   * @returns {string[]}\r\n   */\r\n  public get dataExclusions():string[] {\r\n    var exclusions:string = this.settings['@@DataExclusions'];\r\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\r\n  }\r\n\r\n  /**\r\n   * Add items to the list of exclusion patterns that will automatically remove any\r\n   * data that matches them from any data submitted to the server.\r\n   *\r\n   * For example, entering CreditCard will remove any extended data properties, form\r\n   * fields, cookies and query parameters from the report.\r\n   *\r\n   * @param exclusions\r\n   */\r\n  public addDataExclusions(...exclusions:string[]) {\r\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\r\n  }\r\n\r\n  /**\r\n   * The list of plugins that will be used in this configuration.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _plugins:IEventPlugin[] = [];\r\n\r\n  /**\r\n   * The list of plugins that will be used in this configuration.\r\n   * @returns {IEventPlugin[]}\r\n   */\r\n  public get plugins():IEventPlugin[] {\r\n    return this._plugins.sort((p1:IEventPlugin, p2:IEventPlugin) => {\r\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register an plugin to be used in this configuration.\r\n   * @param plugin\r\n   */\r\n  public addPlugin(plugin:IEventPlugin): void;\r\n\r\n  /**\r\n   * Register an plugin to be used in this configuration.\r\n   * @param name The name used to identify the plugin.\r\n   * @param priority Used to determine plugins priority.\r\n   * @param pluginAction A function that is run.\r\n   */\r\n  public addPlugin(name:string, priority:number, pluginAction:(context:EventPluginContext, next?:() => void) => void): void;\r\n  public addPlugin(pluginOrName:IEventPlugin|string, priority?:number, pluginAction?:(context:EventPluginContext, next?:() => void) => void): void {\r\n    var plugin:IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\r\n    if (!plugin || !plugin.run) {\r\n      this.log.error('Add plugin failed: Run method not defined');\r\n      return;\r\n    }\r\n\r\n    if (!plugin.name) {\r\n      plugin.name = Utils.guid();\r\n    }\r\n\r\n    if (!plugin.priority) {\r\n      plugin.priority = 0;\r\n    }\r\n\r\n    var pluginExists:boolean = false;\r\n    var plugins = this._plugins; // optimization for minifier.\r\n    for (var index = 0; index < plugins.length; index++) {\r\n      if (plugins[index].name === plugin.name) {\r\n        pluginExists = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!pluginExists) {\r\n      plugins.push(plugin);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the plugin from this configuration.\r\n   * @param plugin\r\n   */\r\n  public removePlugin(plugin:IEventPlugin): void;\r\n\r\n  /**\r\n   * Remove an plugin by key from this configuration.\r\n   * @param name\r\n   */\r\n  public removePlugin(name:string): void;\r\n  public removePlugin(pluginOrName:IEventPlugin|string): void {\r\n    var name:string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\r\n    if (!name) {\r\n      this.log.error('Remove plugin failed: Plugin name not defined');\r\n      return;\r\n    }\r\n\r\n    var plugins = this._plugins; // optimization for minifier.\r\n    for (var index = 0; index < plugins.length; index++) {\r\n      if (plugins[index].name === name) {\r\n        plugins.splice(index, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Automatically set the application version for events.\r\n   * @param version\r\n   */\r\n  public setVersion(version:string): void {\r\n    if (!!version) {\r\n      this.defaultData['@version'] = version;\r\n    }\r\n  }\r\n\r\n  public setUserIdentity(userInfo:IUserInfo): void;\r\n  public setUserIdentity(identity:string): void;\r\n  public setUserIdentity(identity:string, name:string): void;\r\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): void {\r\n    const USER_KEY:string = '@user'; // optimization for minifier.\r\n    var userInfo:IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n\r\n    var shouldRemove:boolean = !userInfo || (!userInfo.identity && !userInfo.name);\r\n    if (shouldRemove) {\r\n      delete this.defaultData[USER_KEY];\r\n    } else {\r\n      this.defaultData[USER_KEY] = userInfo;\r\n    }\r\n\r\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\r\n  }\r\n\r\n  /**\r\n   * Used to identify the client that sent the events to the server.\r\n   * @returns {string}\r\n   */\r\n  public get userAgent():string {\r\n    return 'exceptionless-js/1.0.0.0';\r\n  }\r\n\r\n  /**\r\n   * Automatically set a reference id for error events.\r\n   */\r\n  public useReferenceIds(): void {\r\n    this.addPlugin(new ReferenceIdPlugin());\r\n  }\r\n\r\n  // TODO: Support a min log level.\r\n  public useDebugLogger(): void {\r\n    this.log = new ConsoleLog();\r\n  }\r\n\r\n  /**\r\n   * The default configuration settings that are applied to new configuration instances.\r\n   * @type {IConfigurationSettings}\r\n   * @private\r\n   */\r\n  private static _defaultSettings:IConfigurationSettings = null;\r\n\r\n  /**\r\n   * The default configuration settings that are applied to new configuration instances.\r\n   * @returns {IConfigurationSettings}\r\n   */\r\n  public static get defaults() {\r\n    if (Configuration._defaultSettings === null) {\r\n      Configuration._defaultSettings = {};\r\n    }\r\n\r\n    return Configuration._defaultSettings;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                                                                  \r\n\r\nexport class EventBuilder {\r\n  private _validIdentifierErrorMessage:string = \"must contain between 8 and 100 alphanumeric or '-' characters.\"; // optimization for minifier.\r\n\r\n  public target:IEvent;\r\n  public client:ExceptionlessClient;\r\n  public pluginContextData:ContextData;\r\n\r\n  constructor(event:IEvent, client:ExceptionlessClient, pluginContextData?:ContextData) {\r\n    this.target = event;\r\n    this.client = client;\r\n    this.pluginContextData = pluginContextData || new ContextData();\r\n  }\r\n\r\n  public setType(type:string): EventBuilder {\r\n    if (!!type) {\r\n      this.target.type = type;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setSource(source:string): EventBuilder {\r\n    if (!!source) {\r\n      this.target.source = source;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setSessionId(sessionId:string): EventBuilder {\r\n    if (!this.isValidIdentifier(sessionId)) {\r\n      throw new Error(`SessionId ${this._validIdentifierErrorMessage}`);\r\n    }\r\n\r\n    this.target.session_id = sessionId;\r\n    return this;\r\n  }\r\n\r\n  public setReferenceId(referenceId:string): EventBuilder {\r\n    if (!this.isValidIdentifier(referenceId)) {\r\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\r\n    }\r\n\r\n    this.target.reference_id = referenceId;\r\n    return this;\r\n  }\r\n\r\n  public setMessage(message:string): EventBuilder {\r\n    if (!!message) {\r\n      this.target.message = message;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setGeo(latitude: number, longitude: number): EventBuilder {\r\n    if (latitude < -90.0 || latitude > 90.0)\r\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\r\n    if (longitude < -180.0 || longitude > 180.0)\r\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\r\n\r\n    this.target.geo = `${latitude},${longitude}`;\r\n    return this;\r\n  }\r\n\r\n  public setUserIdentity(userInfo:IUserInfo): EventBuilder;\r\n  public setUserIdentity(identity:string): EventBuilder;\r\n  public setUserIdentity(identity:string, name:string): EventBuilder;\r\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): EventBuilder {\r\n    var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\r\n      return this;\r\n    }\r\n\r\n    this.setProperty('@user', userInfo);\r\n    return this;\r\n  }\r\n\r\n  public setValue(value:number): EventBuilder {\r\n    if (!!value) {\r\n      this.target.value = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTags(...tags:string[]): EventBuilder {\r\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\r\n    return this;\r\n  }\r\n\r\n  public setProperty(name:string, value:any): EventBuilder {\r\n    if (!name || (value === undefined || value == null)) {\r\n      return this;\r\n    }\r\n\r\n    if (!this.target.data) {\r\n      this.target.data = {};\r\n    }\r\n\r\n    this.target.data[name] = value;\r\n    return this;\r\n  }\r\n\r\n  public markAsCritical(critical:boolean): EventBuilder {\r\n    if (critical) {\r\n      this.addTags('Critical');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addRequestInfo(request:Object): EventBuilder {\r\n    if (!!request) {\r\n      this.pluginContextData['@request'] = request;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public submit(callback?:(context:EventPluginContext) => void): void {\r\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\r\n  }\r\n\r\n  private isValidIdentifier(value:string): boolean {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    if (value.length < 8 || value.length > 100) {\r\n      return false;\r\n    }\r\n\r\n    for (var index = 0; index < value.length; index++) {\r\n      var code = value.charCodeAt(index);\r\n      var isDigit = (code >= 48) && (code <= 57);\r\n      var isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\r\n      var isMinus = code === 45;\r\n\r\n      if (!(isDigit || isLetter) && !isMinus) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\n                                                                                  \r\n\r\nexport interface IError extends IInnerError {\r\n  modules?:IModule[]\r\n}\r\n\nexport interface IUserDescription {\r\n  email_address?:string;\r\n  description?:string;\r\n  data?:any;\r\n}\r\n\nexport class ContextData {\r\n  public setException(exception:Error): void {\r\n    if (exception) {\r\n      this['@@_Exception'] = exception;\r\n    }\r\n  }\r\n\r\n  public get hasException(): boolean {\r\n    return !!this['@@_Exception']\r\n  }\r\n\r\n  public getException(): Error {\r\n    return this['@@_Exception'] || null;\r\n  }\r\n\r\n  public markAsUnhandledError(): void {\r\n    this['@@_IsUnhandledError'] = true;\r\n  }\r\n\r\n  public get isUnhandledError(): boolean {\r\n    return !!this['@@_IsUnhandledError'];\r\n  }\r\n\r\n  public setSubmissionMethod(method:string): void {\r\n    if (method) {\r\n      this['@@_SubmissionMethod'] = method;\r\n    }\r\n  }\r\n\r\n  public getSubmissionMethod(): string {\r\n    return this['@@_SubmissionMethod'] || null;\r\n  }\r\n}\r\n\nexport class SubmissionResponse {\r\n  success:boolean = false;\r\n  badRequest:boolean = false;\r\n  serviceUnavailable:boolean = false;\r\n  paymentRequired:boolean = false;\r\n  unableToAuthenticate:boolean = false;\r\n  notFound:boolean = false;\r\n  requestEntityTooLarge:boolean = false;\r\n  statusCode:number;\r\n  message:string;\r\n\r\n  constructor(statusCode:number, message?:string) {\r\n    this.statusCode = statusCode;\r\n    this.message = message;\r\n\r\n    this.success = statusCode >= 200 && statusCode <= 299;\r\n    this.badRequest = statusCode === 400;\r\n    this.serviceUnavailable = statusCode === 503;\r\n    this.paymentRequired = statusCode === 402;\r\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\r\n    this.notFound = statusCode === 404;\r\n    this.requestEntityTooLarge = statusCode === 413;\r\n  }\r\n}\r\n\nr\n\r\nexport class ExceptionlessClient {\r\n  public config:Configuration;\r\n\r\n  constructor();\r\n  constructor(settings:IConfigurationSettings);\r\n  constructor(apiKey:string, serverUrl?:string);\r\n  constructor(settingsOrApiKey?:IConfigurationSettings|string, serverUrl?:string) {\r\n    if (typeof settingsOrApiKey !== 'object') {\r\n      this.config = new Configuration(settingsOrApiKey);\r\n    } else {\r\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\r\n    }\r\n  }\r\n\r\n  public createException(exception:Error): EventBuilder {\r\n    var pluginContextData = new ContextData();\r\n    pluginContextData.setException(exception);\r\n    return this.createEvent(pluginContextData).setType('error');\r\n  }\r\n\r\n  public submitException(exception:Error, callback?:(context:EventPluginContext) => void): void {\r\n    this.createException(exception).submit(callback);\r\n  }\r\n\r\n  public createUnhandledException(exception:Error, submissionMethod?:string): EventBuilder {\r\n    var builder = this.createException(exception);\r\n    builder.pluginContextData.markAsUnhandledError();\r\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\r\n\r\n    return builder;\r\n  }\r\n\r\n  public submitUnhandledException(exception:Error, submissionMethod?:string, callback?:(context:EventPluginContext) => void) {\r\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\r\n  }\r\n\r\n  public createFeatureUsage(feature:string): EventBuilder {\r\n    return this.createEvent().setType('usage').setSource(feature);\r\n  }\r\n\r\n  public submitFeatureUsage(feature:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createFeatureUsage(feature).submit(callback);\r\n  }\r\n\r\n  public createLog(message:string): EventBuilder;\r\n  public createLog(source:string, message:string): EventBuilder;\r\n  public createLog(source:string, message:string, level:string): EventBuilder;\r\n  public createLog(sourceOrMessage:string, message?:string, level?:string): EventBuilder {\r\n    var builder = this.createEvent().setType('log');\r\n\r\n    if (message && level) {\r\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\r\n    } else if (message) {\r\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\r\n    } else {\r\n      // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\r\n      var caller:any = arguments.callee.caller;\r\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\r\n    }\r\n\r\n    return builder;\r\n  }\r\n\r\n  public submitLog(message:string): void;\r\n  public submitLog(source:string, message:string): void;\r\n  public submitLog(source:string, message:string, level:string, callback?:(context:EventPluginContext) => void): void;\r\n  public submitLog(sourceOrMessage:string, message?:string, level?:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createLog(sourceOrMessage, message, level).submit(callback);\r\n  }\r\n\r\n  public createNotFound(resource:string): EventBuilder {\r\n    return this.createEvent().setType('404').setSource(resource);\r\n  }\r\n\r\n  public submitNotFound(resource:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createNotFound(resource).submit(callback);\r\n  }\r\n\r\n  public createSessionStart(sessionId:string): EventBuilder {\r\n    return this.createEvent().setType('start').setSessionId(sessionId);\r\n  }\r\n\r\n  public submitSessionStart(sessionId:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createSessionStart(sessionId).submit(callback);\r\n  }\r\n\r\n  public createSessionEnd(sessionId:string): EventBuilder {\r\n    return this.createEvent().setType('end').setSessionId(sessionId);\r\n  }\r\n\r\n  public submitSessionEnd(sessionId:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createSessionEnd(sessionId).submit(callback);\r\n  }\r\n\r\n  public createEvent(pluginContextData?:ContextData): EventBuilder {\r\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\r\n  }\r\n\r\n  /**\r\n   * Submits the event to be sent to the server.\r\n   * @param event The event data.\r\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\r\n   * @param callback\r\n   */\r\n  public submitEvent(event:IEvent, pluginContextData?:ContextData, callback?:(context:EventPluginContext) => void): void {\r\n    function cancelled() {\r\n      if (!!context) {\r\n        context.cancelled = true;\r\n      }\r\n\r\n      return !!callback && callback(context);\r\n    }\r\n\r\n    if (!event) {\r\n      return cancelled();\r\n    }\r\n\r\n    if (!this.config.enabled) {\r\n      this.config.log.info('Event submission is currently disabled.');\r\n      return cancelled();\r\n    }\r\n\r\n    if (!event.data) {\r\n      event.data = {};\r\n    }\r\n\r\n    if (!event.tags || !event.tags.length) {\r\n      event.tags = [];\r\n    }\r\n\r\n    var context = new EventPluginContext(this, event, pluginContextData);\r\n    EventPluginManager.run(context, function (context:EventPluginContext) {\r\n      let ev = context.event;\r\n      if (!context.cancelled) {\r\n        // ensure all required data\r\n        if (!ev.type || ev.type.length === 0) {\r\n          ev.type = 'log';\r\n        }\r\n\r\n        if (!ev.date) {\r\n          ev.date = new Date();\r\n        }\r\n\r\n        var config = context.client.config;\r\n        config.queue.enqueue(ev);\r\n\r\n        if (ev.reference_id && ev.reference_id.length > 0) {\r\n          context.log.info(`Setting last reference id '${ev.reference_id}'`);\r\n          config.lastReferenceIdManager.setLast(ev.reference_id);\r\n        }\r\n      }\r\n\r\n      !!callback && callback(context);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the user's email address and description of an event for the specified reference id.\r\n   * @param referenceId The reference id of the event to update.\r\n   * @param email The user's email address to set on the event.\r\n   * @param description The user's description of the event.\r\n   */\r\n  public updateUserEmailAndDescription(referenceId:string, email:string, description:string, callback?:(response:SubmissionResponse) => void) {\r\n    if (!referenceId || !email || !description || !this.config.enabled) {\r\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\r\n    }\r\n\r\n    var userDescription:IUserDescription = { email_address: email, description: description };\r\n    var response = this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response:SubmissionResponse) => {\r\n      if (!response.success) {\r\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`)\r\n      }\r\n\r\n      !!callback && callback(response);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the last event client id that was submitted to the server.\r\n   * @returns {string} The event client id.\r\n   */\r\n  public getLastReferenceId(): string {\r\n    return this.config.lastReferenceIdManager.getLast();\r\n  }\r\n\r\n  /**\r\n   * The default ExceptionlessClient instance.\r\n   * @type {ExceptionlessClient}\r\n   * @private\r\n   */\r\n  private static _instance:ExceptionlessClient = null;\r\n\r\n\r\n  /**\r\n   * The default ExceptionlessClient instance.\r\n   * @type {ExceptionlessClient}\r\n   */\r\n  public static get default() {\r\n    if(ExceptionlessClient._instance === null) {\r\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\r\n    }\r\n\r\n    return ExceptionlessClient._instance;\r\n  }\r\n}\r\n\nexport interface IParameter {\r\n  data?:any;\r\n  generic_arguments?:string[];\r\n\r\n  name?:string;\r\n  type?:string;\r\n  type_namespace?:string;\r\n}\r\n\n                                          \r\n\r\nexport interface IMethod {\r\n  data?:any;\r\n  generic_arguments?:string[];\r\n  parameters?:IParameter[];\r\n\r\n  is_signature_target?:boolean;\r\n  declaring_namespace?:string;\r\n  declaring_type?:string;\r\n  name?:string;\r\n  module_id?:number;\r\n}\r\n\n                                    \r\n\r\nexport interface IStackFrame extends IMethod {\r\n  file_name?:string;\r\n  line_number?:number;\r\n  column?:number;\r\n}\r\n\n                                                                                  \r\n\r\nexport interface IInnerError {\r\n  message?:string;\r\n  type?:string;\r\n  code?:string;\r\n  data?:any;\r\n  inner?:IInnerError\r\n  stack_trace?:IStackFrame[];\r\n  target_method?:IMethod;\r\n}\r\n\nexport interface IModule {\r\n  data?:any;\r\n\r\n  module_id?:number;\r\n  name?:string;\r\n  version?:string;\r\n  is_entry?:boolean;\r\n  created_date?:Date;\r\n  modified_date?:Date;\r\n}\r\n\nexport interface IRequestInfo {\r\n  user_agent?:string;\r\n  http_method?:string;\r\n  is_secure?:boolean;\r\n  host?:string;\r\n  port?:number;\r\n  path?:string;\r\n  referrer?:string;\r\n  client_ip_address?:string;\r\n  cookies?:any;\r\n  post_data?:any;\r\n  query_string?:any;\r\n  data?:any\r\n}\r\n\nexport interface IEnvironmentInfo {\r\n  processor_count?:number;\r\n  total_physical_memory?:number;\r\n  available_physical_memory?:number;\r\n  command_line?:string;\r\n  process_name?:string;\r\n  process_id?:string;\r\n  process_memory_size?:number;\r\n  thread_id?:string;\r\n  architecture?:string;\r\n  o_s_name?:string;\r\n  o_s_version?:string;\r\n  ip_address?:string;\r\n  machine_name?:string;\r\n  install_id?:string;\r\n  runtime_version?:string;\r\n  data?:any;\r\n}\r\n\n                                                                                                            \r\n\r\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\r\n  public priority:number = 10;\r\n  public name:string = 'ConfigurationDefaultsPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    var defaultTags:string[] = context.client.config.defaultTags || [];\r\n    for (var index = 0; index < defaultTags.length; index++) {\r\n      var tag = defaultTags[index];\r\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\r\n        context.event.tags.push(tag)\r\n      }\r\n    }\r\n\r\n    var defaultData:Object = context.client.config.defaultData || {};\r\n    for (var key in defaultData) {\r\n      if (!!defaultData[key]) {\r\n        context.event.data[key] = defaultData[key];\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                            \r\n\r\nexport class ErrorPlugin implements IEventPlugin {\r\n  public priority:number = 30;\r\n  public name:string = 'ErrorPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const ERROR_KEY:string = '@error'; // optimization for minifier.\r\n\r\n    var exception = context.contextData.getException();\r\n    if (!!exception) {\r\n      context.event.type = 'error';\r\n\r\n      if (!context.event.data[ERROR_KEY]) {\r\n        var parser = context.client.config.errorParser;\r\n        if (!parser) {\r\n          throw new Error('No error parser was defined.');\r\n        }\r\n\r\n        var result = parser.parse(context, exception);\r\n        if (!!result) {\r\n          context.event.data[ERROR_KEY] = result;\r\n        }\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                   \r\n\r\nexport class ModuleInfoPlugin implements IEventPlugin {\r\n  public priority:number = 40;\r\n  public name:string = 'ModuleInfoPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const ERROR_KEY:string = '@error'; // optimization for minifier.\r\n\r\n    var collector = context.client.config.moduleCollector;\r\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\r\n      var modules = collector.getModules(context);\r\n      if (modules && modules.length > 0) {\r\n        context.event.data[ERROR_KEY].modules = modules;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                       \r\n\r\nexport class RequestInfoPlugin implements IEventPlugin {\r\n  public priority:number = 60;\r\n  public name:string = 'RequestInfoPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const REQUEST_KEY:string = '@request'; // optimization for minifier.\r\n\r\n    var collector = context.client.config.requestInfoCollector;\r\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\r\n      var requestInfo = collector.getRequestInfo(context);\r\n      if (!!requestInfo) {\r\n        context.event.data[REQUEST_KEY] = requestInfo;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                               \r\n\r\nexport class EnvironmentInfoPlugin implements IEventPlugin {\r\n  public priority:number = 70;\r\n  public name:string = 'EnvironmentInfoPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const ENVIRONMENT_KEY:string = '@environment'; // optimization for minifier.\r\n\r\n    var collector = context.client.config.environmentInfoCollector;\r\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\r\n      var environmentInfo = collector.getEnvironmentInfo(context);\r\n      if (!!environmentInfo) {\r\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                            \r\n\r\nexport class SubmissionMethodPlugin implements IEventPlugin {\r\n  public priority:number = 100;\r\n  public name:string = 'SubmissionMethodPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    var submissionMethod:string = context.contextData.getSubmissionMethod();\r\n    if (!!submissionMethod) {\r\n      context.event.data['@submission_method'] = submissionMethod;\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\nexport interface IStorageItem<T> {\r\n  created:number;\r\n  path:string;\r\n  value:T;\r\n}\r\n\nexport class SettingsResponse {\r\n  success:boolean = false;\r\n  settings:any;\r\n  settingsVersion:number = -1;\r\n  message:string;\r\n  exception:any;\r\n\r\n  constructor(success:boolean, settings:any, settingsVersion:number = -1, exception:any = null, message:string = null) {\r\n    this.success = success;\r\n    this.settings = settings;\r\n    this.settingsVersion = settingsVersion;\r\n    this.exception = exception;\r\n    this.message = message;\r\n  }\r\n}\r\n\nexport interface IClientConfiguration {\r\n  settings:Object;\r\n  version:number;\r\n}\r\n\n                                                                                                                                                                                                                                                                       \r\n\r\nexport class DefaultErrorParser implements IErrorParser {\r\n  public parse(context:EventPluginContext, exception:Error): IError {\r\n    function getParameters(parameters:string|string[]): IParameter[] {\r\n      var params:string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\r\n\r\n      var result:IParameter[] = [];\r\n      for (var index = 0; index < params.length; index++) {\r\n        result.push({ name: params[index] })\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function getStackFrames(context:EventPluginContext, stackFrames:TraceKit.StackFrame[]): IStackFrame[] {\r\n      const ANONYMOUS:string = '<anonymous>';\r\n      var frames:IStackFrame[] = [];\r\n\r\n      for (var index = 0; index < stackFrames.length; index++) {\r\n        var frame = stackFrames[index];\r\n        frames.push({\r\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\r\n          parameters: getParameters(frame.args),\r\n          file_name: frame.url,\r\n          line_number: frame.line || 0,\r\n          column: frame.column || 0\r\n        });\r\n      }\r\n\r\n      return frames;\r\n    }\r\n\r\n    const TRACEKIT_STACK_TRACE_KEY:string = '@@_TraceKit.StackTrace'; // optimization for minifier.\r\n\r\n    var stackTrace:TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n      : TraceKit.computeStackTrace(exception, 25);\r\n\r\n    if (!stackTrace) {\r\n      throw new Error('Unable to parse the exceptions stack trace.');\r\n    }\r\n\r\n    return {\r\n      type: stackTrace.name,\r\n      message: stackTrace.message || exception.message,\r\n      stack_trace: getStackFrames(context, stackTrace.stack || [])\r\n    };\r\n  }\r\n}\r\n\n                                                                                                                                                                                                          \r\n\r\nexport class DefaultModuleCollector implements IModuleCollector {\r\n  public getModules(context:EventPluginContext): IModule[] {\r\n    if (document && document.getElementsByTagName) {\r\n      return null;\r\n    }\r\n\r\n    var modules:IModule[] = [];\r\n    var scripts = document.getElementsByTagName('script');\r\n    if (scripts && scripts.length > 0) {\r\n      for (var index = 0; index < scripts.length; index++) {\r\n        if (scripts[index].src) {\r\n          modules.push({\r\n            module_id: index,\r\n            name: scripts[index].src,\r\n            version: Utils.parseVersion(scripts[index].src)\r\n          });\r\n        } else if (!!scripts[index].innerHTML) {\r\n          modules.push({\r\n            module_id: index,\r\n            name: 'Script Tag',\r\n            version: Utils.getHashCode(scripts[index].innerHTML)\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return modules;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                              \r\n\r\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\r\n  public getRequestInfo(context:EventPluginContext): IRequestInfo {\r\n    if (!document || !navigator || !location) {\r\n      return null;\r\n    }\r\n\r\n    var requestInfo:IRequestInfo = {\r\n      user_agent: navigator.userAgent,\r\n      is_secure: location.protocol === 'https:',\r\n      host: location.hostname,\r\n      port: location.port && location.port !== '' ? parseInt(location.port) : 80,\r\n      path: location.pathname,\r\n      //client_ip_address: 'TODO',\r\n      cookies: Utils.getCookies(document.cookie),\r\n      query_string: Utils.parseQueryString(location.search.substring(1))\r\n    };\r\n\r\n    if (document.referrer && document.referrer !== '') {\r\n      requestInfo.referrer = document.referrer;\r\n    }\r\n\r\n    return requestInfo;\r\n  }\r\n}\r\n\nr\n\r\ndeclare var XDomainRequest:{ new (); create(); };\r\n\r\nexport class DefaultSubmissionClient implements ISubmissionClient {\r\n  public configurationVersionHeader:string = 'X-Exceptionless-ConfigVersion';\r\n\r\n  public postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void):void {\r\n    return this.sendRequest(config, 'POST', '/api/v2/events', Utils.stringify(events, config.dataExclusions), (status:number, message:string, data?:string, headers?:Object) => {\r\n      var settingsVersion:number = headers && parseInt(headers[this.configurationVersionHeader]);\r\n      SettingsManager.checkVersion(settingsVersion, config);\r\n\r\n      callback(new SubmissionResponse(status, message));\r\n    });\r\n  }\r\n\r\n  public postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void {\r\n    var path = `/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\r\n    return this.sendRequest(config, 'POST', path, Utils.stringify(description, config.dataExclusions), (status:number, message:string, data?:string, headers?:Object) => {\r\n      var settingsVersion:number = headers && parseInt(headers[this.configurationVersionHeader]);\r\n      SettingsManager.checkVersion(settingsVersion, config);\r\n\r\n      callback(new SubmissionResponse(status, message));\r\n    });\r\n  }\r\n\r\n  public getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void {\r\n    return this.sendRequest(config, 'GET', '/api/v2/projects/config', null, (status:number, message:string, data?:string) => {\r\n      if (status !== 200) {\r\n        return callback(new SettingsResponse(false, null, -1, null, message));\r\n      }\r\n\r\n      var settings:IClientConfiguration;\r\n      try {\r\n        settings = JSON.parse(data);\r\n      } catch (e) {\r\n        config.log.error(`Unable to parse settings: '${data}'`);\r\n      }\r\n\r\n      if (!settings || isNaN(settings.version)) {\r\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\r\n      }\r\n\r\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\r\n    });\r\n  }\r\n\r\n  public sendRequest(config:Configuration, method:string, path:string, data:string, callback: (status:number, message:string, data?:string, headers?:Object) => void): void {\r\n    const TIMEOUT:string = 'timeout';  // optimization for minifier.\r\n    const LOADED:string = 'loaded';  // optimization for minifier.\r\n    const WITH_CREDENTIALS:string = 'withCredentials';  // optimization for minifier.\r\n\r\n    var isCompleted:boolean = false;\r\n    var useSetTimeout:boolean = false;\r\n    function complete(mode:string, xhr:XMLHttpRequest) {\r\n      function parseResponseHeaders(headerStr) {\r\n        var headers = {};\r\n        var headerPairs = (headerStr || '').split('\\u000d\\u000a');\r\n        for (var index:number = 0; index < headerPairs.length; index++) {\r\n          var headerPair = headerPairs[index];\r\n          // Can't use split() here because it does the wrong thing\r\n          // if the header value has the string \": \" in it.\r\n          var separator = headerPair.indexOf('\\u003a\\u0020');\r\n          if (separator > 0) {\r\n            headers[headerPair.substring(0, separator)] = headerPair.substring(separator + 2);\r\n          }\r\n        }\r\n\r\n        return headers;\r\n      }\r\n\r\n      if (isCompleted) {\r\n        return;\r\n      }\r\n\r\n      isCompleted = true;\r\n\r\n      var message:string = xhr.statusText;\r\n      var responseText:string = xhr.responseText;\r\n      var status:number = xhr.status;\r\n\r\n      if (mode === TIMEOUT || status === 0) {\r\n        message = 'Unable to connect to server.';\r\n        status = 0;\r\n      } else if (mode === LOADED && !status) {\r\n          status = method === 'POST' ? 202 : 200;\r\n      } else if (status < 200 || status > 299) {\r\n        var responseBody:any = xhr.responseBody;\r\n        if (!!responseBody && !!responseBody.message) {\r\n          message = responseBody.message;\r\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\r\n          try {\r\n            message =  JSON.parse(responseText).message;\r\n          } catch (e) {\r\n            message = responseText;\r\n          }\r\n        }\r\n      }\r\n\r\n      callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\r\n    }\r\n\r\n    function createRequest(config:Configuration, method:string, url:string): XMLHttpRequest {\r\n      var xhr:any = new XMLHttpRequest();\r\n      if (WITH_CREDENTIALS in xhr) {\r\n        xhr.open(method, url, true);\r\n\r\n        xhr.setRequestHeader('X-Exceptionless-Client', config.userAgent);\r\n        if (method === 'POST') {\r\n          xhr.setRequestHeader('Content-Type', 'application/json');\r\n        }\r\n      } else if (typeof XDomainRequest != 'undefined') {\r\n        useSetTimeout = true;\r\n        xhr = new XDomainRequest();\r\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\r\n      } else {\r\n        xhr = null;\r\n      }\r\n\r\n      if (xhr) {\r\n        xhr.timeout = 10000;\r\n      }\r\n\r\n      return xhr;\r\n    }\r\n\r\n    var url = `${config.serverUrl}${path}?access_token=${encodeURIComponent(config.apiKey)}`;\r\n    var xhr = createRequest(config, method || 'POST', url);\r\n    if (!xhr) {\r\n      return callback(503, 'CORS not supported.');\r\n    }\r\n\r\n    if (WITH_CREDENTIALS in xhr) {\r\n      xhr.onreadystatechange = () => {\r\n        // xhr not ready.\r\n        if (xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        complete(LOADED, xhr);\r\n      };\r\n    }\r\n\r\n    xhr.onprogress = () => {};\r\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\r\n    xhr.onerror = () => complete('error', xhr);\r\n    xhr.onload = () => complete(LOADED, xhr);\r\n\r\n    if (useSetTimeout) {\r\n      setTimeout(() => xhr.send(data), 500);\r\n    } else {\r\n      xhr.send(data);\r\n    }\r\n  }\r\n}\r\n\nr\n\r\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\r\n  if (!document || !document.getElementsByTagName) {\r\n    return null;\r\n  }\r\n\r\n  var scripts = document.getElementsByTagName('script');\r\n  for (var index = 0; index < scripts.length; index++) {\r\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\r\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction processUnhandledException(stackTrace:TraceKit.StackTrace, options?:any): void {\r\n  var builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\r\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\r\n  builder.submit();\r\n}\r\n\r\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\r\n  var client = ExceptionlessClient.default;\r\n  if (xhr.status === 404) {\r\n    client.submitNotFound(settings.url);\r\n  } else if (xhr.status !== 401) {\r\n    var err = new Error(error);\r\n    client.createUnhandledException(err, 'JQuery.ajaxError')\r\n      .setSource(settings.url)\r\n      .setProperty('status', xhr.status)\r\n      .setProperty('request', settings.data)\r\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\r\n      .submit();\r\n  }\r\n}\r\n\r\nvar defaults = Configuration.defaults;\r\nvar settings = getDefaultsSettingsFromScriptTag();\r\nif (settings && (settings.apiKey || settings.serverUrl)) {\r\n  defaults.apiKey = settings.apiKey;\r\n  defaults.serverUrl = settings.serverUrl;\r\n}\r\n\r\ndefaults.errorParser = new DefaultErrorParser();\r\ndefaults.moduleCollector = new DefaultModuleCollector();\r\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\r\ndefaults.submissionClient = new DefaultSubmissionClient();\r\n\r\nTraceKit.report.subscribe(processUnhandledException);\r\nTraceKit.extendToAsynchronousCallbacks();\r\n\r\nif (typeof $ !== 'undefined' && $(document)) {\r\n  $(document).ajaxError(processJQueryAjaxError);\r\n}\r\n\r\n(<any>Error).stackTraceLimit = Infinity;\r\n\r\ndeclare var $;\r\n\n",null],"sourceRoot":"/source/"}