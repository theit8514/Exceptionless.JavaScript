{"version":3,"sources":["tracekit.js","/source/exceptionless.ts"],"names":["getDefaultsSettingsFromScriptTag","processUnhandledException","processJQueryAjaxError"],"mappingsoCA,8BAA8B,+BAA+B,CAAC,CAAA;AAqC9D,mCAAmC,+BAA+B,CAAC,CAAA;AACnE,uCAAuC,mCAAmC,CAAC,CAAA;AAC3E,4CAA4C,wCAAwC,CAAC,CAAA;AAIrF,wCAAwC,sCAAsC,CAAC,CAAA;AAK/E,oCAAoC,qBAAqB,CAAC,CAAA;AAC1D,sBAAsB,OAAO,CAAC,CAAA;AAE9B;IACEA,EAAEA,CAACA,CAACA,CAACA,QAAQA,IAAIA,CAACA,QAAQA,CAACA,oBAAoBA,CAACA,CAACA,CAACA;QAChDA,MAAMA,CAACA,IAAIA,CAACA;IACdA,CAACA;IAEDA,IAAIA,OAAOA,GAAGA,QAAQA,CAACA,oBAAoBA,CAACA,QAAQA,CAACA,CAACA;IACtDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,KAAKA,GAAGA,CAACA,EAAEA,KAAKA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,KAAKA,EAAEA,EAAEA,CAACA;QACpDA,EAAEA,CAACA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA,GAAGA,IAAIA,OAAOA,CAACA,KAAKA,CAACA,CAACA,GAAGA,CAACA,OAAOA,CAACA,gBAAgBA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC5EA,MAAMA,CAACA,aAAKA,CAACA,gBAAgBA,CAACA,OAAOA,CAACA,KAAKA,CAACA,CAACA,GAAGA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,GAAGA,EAAEA,CAACA,CAACA;QACrEA,CAACA;IACHA,CAACA;IACDA,MAAMA,CAACA,IAAIA,CAACA;AACdA,CAACA;AAED,mCAAmC,UAA8B,EAAE,OAAY;IAC7EC,IAAIA,OAAOA,GAAGA,yCAAmBA,CAACA,OAAOA,CAACA,wBAAwBA,CAACA,IAAIA,KAAKA,CAACA,UAAUA,CAACA,OAAOA,IAAIA,CAACA,OAAOA,IAAIA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,cAAcA,CAACA,EAAEA,SAASA,CAACA,CAACA;IACzJA,OAAOA,CAACA,iBAAiBA,CAACA,wBAAwBA,CAACA,GAAGA,UAAUA,CAACA;IACjEA,OAAOA,CAACA,MAAMA,EAAEA,CAACA;AACnBA,CAACA;AAED,gCAAgC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAY;IAChEC,IAAIA,MAAMA,GAAGA,yCAAmBA,CAACA,OAAOA,CAACA;IACzCA,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,KAAKA,GAAGA,CAACA,CAACA,CAACA;QACvBA,MAAMA,CAACA,cAAcA,CAACA,QAAQA,CAACA,GAAGA,CAACA,CAACA;IACtCA,CAACA;IAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,KAAKA,GAAGA,CAACA,CAACA,CAACA;QAC9BA,IAAIA,GAAGA,GAAGA,IAAIA,KAAKA,CAACA,KAAKA,CAACA,CAACA;QAC3BA,MAAMA,CAACA,wBAAwBA,CAACA,GAAGA,EAAEA,kBAAkBA,CAACA;aACrDA,SAASA,CAACA,QAAQA,CAACA,GAAGA,CAACA;aACvBA,WAAWA,CAACA,QAAQA,EAAEA,GAAGA,CAACA,MAAMA,CAACA;aACjCA,WAAWA,CAACA,SAASA,EAAEA,QAAQA,CAACA,IAAIA,CAACA;aACrCA,WAAWA,CAACA,UAAUA,EAAEA,GAAGA,CAACA,YAAYA,IAAIA,GAAGA,CAACA,YAAYA,CAACA,KAAKA,IAAIA,GAAGA,CAACA,YAAYA,CAACA,KAAKA,CAACA,CAACA,EAAEA,IAAIA,CAACA,CAACA;aACtGA,MAAMA,EAAEA,CAACA;IACdA,CAACA;AACHA,CAACA;AAED,IAAI,QAAQ,GAAG,6BAAa,CAAC,QAAQ,CAAC;AACtC,IAAI,QAAQ,GAAG,gCAAgC,EAAE,CAAC;AAClD,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACxD,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IAClC,QAAQ,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;AAC1C,CAAC;AAED,QAAQ,CAAC,WAAW,GAAG,IAAI,uCAAkB,EAAE,CAAC;AAChD,QAAQ,CAAC,eAAe,GAAG,IAAI,+CAAsB,EAAE,CAAC;AACxD,QAAQ,CAAC,oBAAoB,GAAG,IAAI,yDAA2B,EAAE,CAAC;AAClE,QAAQ,CAAC,gBAAgB,GAAG,IAAI,iDAAuB,EAAE,CAAC;AAE1D,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAC;AACrD,QAAQ,CAAC,6BAA6B,EAAE,CAAC;AAEzC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,WAAW,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAChD,CAAC;AAEK,KAAM,CAAC,eAAe,GAAG,QAAQ,CAAC;AAE1B","file":"exceptionless.js","sourcesContent":["/*\n TraceKit - Cross browser stack traces - github.com/csnover/TraceKit\n MIT license\n*/\n\n(function(window, undefined) {\nif (!window) {\n    return;\n}\n\nvar TraceKit = {};\nvar _oldTraceKit = window.TraceKit;\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n\n/**\n * _has, a better form of hasOwnProperty\n * Example: _has(MainHostObject, property) === true/false\n *\n * @param {Object} object to check property\n * @param {string} key to check\n */\nfunction _has(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction _isUndefined(what) {\n    return typeof what === 'undefined';\n}\n\n/**\n * TraceKit.noConflict: Export TraceKit out to another variable\n * Example: var TK = TraceKit.noConflict()\n */\nTraceKit.noConflict = function noConflict() {\n    window.TraceKit = _oldTraceKit;\n    return TraceKit;\n};\n\n/**\n * TraceKit.wrap: Wrap any function in a TraceKit reporter\n * Example: func = TraceKit.wrap(func);\n *\n * @param {Function} func Function to be wrapped\n * @return {Function} The wrapped func\n */\nTraceKit.wrap = function traceKitWrapper(func) {\n    function wrapped() {\n        try {\n            return func.apply(this, arguments);\n        } catch (e) {\n            TraceKit.report(e);\n            throw e;\n        }\n    }\n    return wrapped;\n};\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (_has(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} columnNo The column number at which the error\n     * occurred.\n     * @param {?Error} errorObj The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n        var stack = null;\n\n        if (errorObj) {\n          stack = TraceKit.computeStackTrace(errorObj);\n        }\n        else\n        {\n            if (lastExceptionStack) {\n                TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n                stack = lastExceptionStack;\n                lastExceptionStack = null;\n                lastException = null;\n            } else {\n                var location = {\n                    'url': url,\n                    'line': lineNo,\n                    'column': columnNo\n                };\n                location.func = TraceKit.computeStackTrace.guessFunctionName(location.url, location.line);\n                location.context = TraceKit.computeStackTrace.gatherContext(location.url, location.line);\n                stack = {\n                    'mode': 'onerror',\n                    'message': message,\n                    'stack': [location]\n                };\n            }\n        }\n\n        notifyHandlers(stack, 'from window.onerror');\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler ()\n    {\n        if (_onErrorHandlerInstalled === true) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     */\n    function report(ex) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n                var s = lastExceptionStack;\n                lastExceptionStack = null;\n                lastException = null;\n                notifyHandlers.apply(null, [s, null].concat(args));\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                lastExceptionStack = null;\n                lastException = null;\n                notifyHandlers.apply(null, [stack, null].concat(args));\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace.ofCaller([depth])\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *   s.stack[i].context  - an array of source code lines; the middle element corresponds to the correct line#\n *   s.mode              - 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * Tracing example:\n *     function trace(message) {\n *         var stackInfo = TraceKit.computeStackTrace.ofCaller();\n *         var data = message + \"\\n\";\n *         for(var i in stackInfo.stack) {\n *             var item = stackInfo.stack[i];\n *             data += (item.func || '[anonymous]') + \"() in \" + item.url + \":\" + (item.line || '0') + \"\\n\";\n *         }\n *         if (window.console)\n *             console.info(data);\n *         else\n *             alert(data);\n *     }\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    var debug = false,\n        sourceCache = {};\n\n    /**\n     * Attempts to retrieve source code via XMLHttpRequest, which is used\n     * to look up anonymous function names.\n     * @param {string} url URL of source code.\n     * @return {string} Source contents.\n     */\n    function loadSource(url) {\n        if (!TraceKit.remoteFetching) { //Only attempt request if remoteFetching is on.\n            return '';\n        }\n        try {\n            var getXHR = function() {\n                try {\n                    return new window.XMLHttpRequest();\n                } catch (e) {\n                    // explicitly bubble up the exception if not found\n                    return new window.ActiveXObject('Microsoft.XMLHTTP');\n                }\n            };\n\n            var request = getXHR();\n            request.open('GET', url, false);\n            request.send('');\n            return request.responseText;\n        } catch (e) {\n            return '';\n        }\n    }\n\n    /**\n     * Retrieves source code from the source code cache.\n     * @param {string} url URL of source code.\n     * @return {Array.<string>} Source contents.\n     */\n    function getSource(url) {\n        if (typeof url !== 'string') {\n            return [];\n        }\n\n        if (!_has(sourceCache, url)) {\n            // URL needs to be able to fetched within the acceptable domain.  Otherwise,\n            // cross-domain errors will be triggered.\n            var source = '';\n\n            var domain = '';\n            try { domain = document.domain; } catch (e) {}\n            if (url.indexOf(domain) !== -1) {\n                source = loadSource(url);\n            }\n            sourceCache[url] = source ? source.split('\\n') : [];\n        }\n\n        return sourceCache[url];\n    }\n\n    /**\n     * Tries to use an externally loaded copy of source code to determine\n     * the name of a function by looking at the name of the variable it was\n     * assigned to, if any.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} lineNo Line number in source code.\n     * @return {string} The function name, if discoverable.\n     */\n    function guessFunctionName(url, lineNo) {\n        var reFunctionArgNames = /function ([^(]*)\\(([^)]*)\\)/,\n            reGuessFunction = /['\"]?([0-9A-Za-z$_]+)['\"]?\\s*[:=]\\s*(function|eval|new Function)/,\n            line = '',\n            maxLines = 10,\n            source = getSource(url),\n            m;\n\n        if (!source.length) {\n            return UNKNOWN_FUNCTION;\n        }\n\n        // Walk backwards from the first line in the function until we find the line which\n        // matches the pattern above, which is the function definition\n        for (var i = 0; i < maxLines; ++i) {\n            line = source[lineNo - i] + line;\n\n            if (!_isUndefined(line)) {\n                if ((m = reGuessFunction.exec(line))) {\n                    return m[1];\n                } else if ((m = reFunctionArgNames.exec(line))) {\n                    return m[1];\n                }\n            }\n        }\n\n        return UNKNOWN_FUNCTION;\n    }\n\n    /**\n     * Retrieves the surrounding lines from where an exception occurred.\n     * @param {string} url URL of source code.\n     * @param {(string|number)} line Line number in source code to centre\n     * around for context.\n     * @return {?Array.<string>} Lines of source code.\n     */\n    function gatherContext(url, line) {\n        var source = getSource(url);\n\n        if (!source.length) {\n            return null;\n        }\n\n        var context = [],\n            // linesBefore & linesAfter are inclusive with the offending line.\n            // if linesOfContext is even, there will be one extra line\n            //   *before* the offending line.\n            linesBefore = Math.floor(TraceKit.linesOfContext / 2),\n            // Add one extra line if linesOfContext is odd\n            linesAfter = linesBefore + (TraceKit.linesOfContext % 2),\n            start = Math.max(0, line - linesBefore - 1),\n            end = Math.min(source.length, line + linesAfter - 1);\n\n        line -= 1; // convert to 0-based index\n\n        for (var i = start; i < end; ++i) {\n            if (!_isUndefined(source[i])) {\n                context.push(source[i]);\n            }\n        }\n\n        return context.length > 0 ? context : null;\n    }\n\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    /**\n     * Determines where a code fragment occurs in the source code.\n     * @param {RegExp} re The function definition.\n     * @param {Array.<string>} urls A list of URLs to search.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceInUrls(re, urls) {\n        var source, m;\n        for (var i = 0, j = urls.length; i < j; ++i) {\n            // console.log('searching', urls[i]);\n            if ((source = getSource(urls[i])).length) {\n                source = source.join('\\n');\n                if ((m = re.exec(source))) {\n                    // console.log('Found function in ' + urls[i]);\n\n                    return {\n                        'url': urls[i],\n                        'line': source.substring(0, m.index).split('\\n').length,\n                        'column': m.index - source.lastIndexOf('\\n', m.index) - 1\n                    };\n                }\n            }\n        }\n\n        // console.log('no match');\n\n        return null;\n    }\n\n    /**\n     * Determines at which column a code fragment occurs on a line of the\n     * source code.\n     * @param {string} fragment The code fragment.\n     * @param {string} url The URL to search.\n     * @param {(string|number)} line The line number to examine.\n     * @return {?number} The column number.\n     */\n    function findSourceInLine(fragment, url, line) {\n        var source = getSource(url),\n            re = new RegExp('\\\\b' + escapeRegExp(fragment) + '\\\\b'),\n            m;\n\n        line -= 1;\n\n        if (source && source.length > line && (m = re.exec(source[line]))) {\n            return m.index;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines where a function was defined within the source code.\n     * @param {(Function|string)} func A function reference or serialized\n     * function definition.\n     * @return {?Object.<string, (string|number)>} An object containing\n     * the url, line, and column number of the defined function.\n     */\n    function findSourceByFunctionBody(func) {\n        var urls = [window.location.href],\n            scripts = document.getElementsByTagName('script'),\n            body,\n            code = '' + func,\n            codeRE = /^function(?:\\s+([\\w$]+))?\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            eventRE = /^function on([\\w$]+)\\s*\\(event\\)\\s*\\{\\s*(\\S[\\s\\S]*\\S)\\s*\\}\\s*$/,\n            re,\n            parts,\n            result;\n\n        for (var i = 0; i < scripts.length; ++i) {\n            var script = scripts[i];\n            if (script.src) {\n                urls.push(script.src);\n            }\n        }\n\n        if (!(parts = codeRE.exec(code))) {\n            re = new RegExp(escapeRegExp(code).replace(/\\s+/g, '\\\\s+'));\n        }\n\n        // not sure if this is really necessary, but I don’t have a test\n        // corpus large enough to confirm that and it was in the original.\n        else {\n            var name = parts[1] ? '\\\\s+' + parts[1] : '',\n                args = parts[2].split(',').join('\\\\s*,\\\\s*');\n\n            body = escapeRegExp(parts[3]).replace(/;$/, ';?'); // semicolon is inserted if the function ends with a comment.replace(/\\s+/g, '\\\\s+');\n            re = new RegExp('function' + name + '\\\\s*\\\\(\\\\s*' + args + '\\\\s*\\\\)\\\\s*{\\\\s*' + body + '\\\\s*}');\n        }\n\n        // look for a normal function definition\n        if ((result = findSourceInUrls(re, urls))) {\n            return result;\n        }\n\n        // look for an old-school event handler function\n        if ((parts = eventRE.exec(code))) {\n            var event = parts[1];\n            body = escapeCodeAsRegExpForMatchingInsideHTML(parts[2]);\n\n            // look for a function defined in HTML as an onXXX handler\n            re = new RegExp('on' + event + '=[\\\\\\'\"]\\\\s*' + body + '\\\\s*[\\\\\\'\"]', 'i');\n\n            if ((result = findSourceInUrls(re, urls[0]))) {\n                return result;\n            }\n\n            // look for ???\n            re = new RegExp(body);\n\n            if ((result = findSourceInUrls(re, urls))) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (!ex.stack) {\n            return null;\n        }\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|chrome-extension|native|eval).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?@?((?:file|https?|chrome|\\[).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:ms-appx|http|https):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = winjs.exec(lines[i]))) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = guessFunctionName(element.url, element.line);\n            }\n\n            if (element.line) {\n                element.context = gatherContext(element.url, element.line);\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (stack[0] && stack[0].line && !stack[0].column && reference) {\n            stack[0].column = findSourceInLine(reference[1], stack[0].url, stack[0].line);\n        } else if (!stack[0].column && !_isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'mode': 'stack',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * Computes stack trace information from the stacktrace property.\n     * Opera 10+ uses this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStacktraceProp(ex) {\n        // Access and store the stacktrace property before doing ANYTHING\n        // else to it because Opera is not very good at providing it\n        // reliably in other circumstances.\n        var stacktrace = ex.stacktrace;\n        if (!stacktrace) {\n            return;\n        }\n\n        var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n            opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n            lines = stacktrace.split('\\n'),\n            stack = [],\n            parts;\n\n        for (var line = 0; line < lines.length; line += 2) {\n            var element = null;\n            if ((parts = opera10Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[2],\n                    'line': +parts[1],\n                    'column': null,\n                    'func': parts[3],\n                    'args':[]\n                };\n            } else if ((parts = opera11Regex.exec(lines[line]))) {\n                element = {\n                    'url': parts[6],\n                    'line': +parts[1],\n                    'column': +parts[2],\n                    'func': parts[3] || parts[4],\n                    'args': parts[5] ? parts[5].split(',') : []\n                };\n            }\n\n            if (element) {\n                if (!element.func && element.line) {\n                    element.func = guessFunctionName(element.url, element.line);\n                }\n                if (element.line) {\n                    try {\n                        element.context = gatherContext(element.url, element.line);\n                    } catch (exc) {}\n                }\n\n                if (!element.context) {\n                    element.context = [lines[line + 1]];\n                }\n\n                stack.push(element);\n            }\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        return {\n            'mode': 'stacktrace',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n    }\n\n    /**\n     * NOT TESTED.\n     * Computes stack trace information from an error message that includes\n     * the stack trace.\n     * Opera 9 and earlier use this method if the option to show stack\n     * traces is turned on in opera:config.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack information.\n     */\n    function computeStackTraceFromOperaMultiLineMessage(ex) {\n        // TODO: Clean this function up\n        // Opera includes a stack trace into the exception message. An example is:\n        //\n        // Statement on line 3: Undefined variable: undefinedFunc\n        // Backtrace:\n        //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n        //         undefinedFunc(a);\n        //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n        //           zzz(x, y, z);\n        //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n        //           yyy(a, a, a);\n        //   Line 1 of function script\n        //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n        //   ...\n\n        var lines = ex.message.split('\\n');\n        if (lines.length < 4) {\n            return null;\n        }\n\n        var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?)\\S+)(?:: in function (\\S+))?\\s*$/i,\n            lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n            stack = [],\n            scripts = document.getElementsByTagName('script'),\n            inlineScriptBlocks = [],\n            parts;\n\n        for (var s in scripts) {\n            if (_has(scripts, s) && !scripts[s].src) {\n                inlineScriptBlocks.push(scripts[s]);\n            }\n        }\n\n        for (var line = 2; line < lines.length; line += 2) {\n            var item = null;\n            if ((parts = lineRE1.exec(lines[line]))) {\n                item = {\n                    'url': parts[2],\n                    'func': parts[3],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null\n                };\n            } else if ((parts = lineRE2.exec(lines[line]))) {\n                item = {\n                    'url': parts[3],\n                    'func': parts[4],\n                    'args': [],\n                    'line': +parts[1],\n                    'column': null // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n                };\n                var relativeLine = (+parts[1]); // relative to the start of the <SCRIPT> block\n                var script = inlineScriptBlocks[parts[2] - 1];\n                if (script) {\n                    var source = getSource(item.url);\n                    if (source) {\n                        source = source.join('\\n');\n                        var pos = source.indexOf(script.innerText);\n                        if (pos >= 0) {\n                            item.line = relativeLine + source.substring(0, pos).split('\\n').length;\n                        }\n                    }\n                }\n            } else if ((parts = lineRE3.exec(lines[line]))) {\n                var url = window.location.href.replace(/#.*$/, '');\n                var re = new RegExp(escapeCodeAsRegExpForMatchingInsideHTML(lines[line + 1]));\n                var src = findSourceInUrls(re, [url]);\n                item = {\n                    'url': url,\n                    'func': '',\n                    'args': [],\n                    'line': src ? src.line : parts[1],\n                    'column': null\n                };\n            }\n\n            if (item) {\n                if (!item.func) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n                var context = gatherContext(item.url, item.line);\n                var midline = (context ? context[Math.floor(context.length / 2)] : null);\n                if (context && midline.replace(/^\\s*/, '') === lines[line + 1].replace(/^\\s*/, '')) {\n                    item.context = context;\n                } else {\n                    // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n                    item.context = [lines[line + 1]];\n                }\n                stack.push(item);\n            }\n        }\n        if (!stack.length) {\n            return null; // could not parse multiline exception message as Opera stack trace\n        }\n\n        return {\n            'mode': 'multiline',\n            'name': ex.name,\n            'message': lines[0],\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = guessFunctionName(initial.url, initial.line);\n            }\n\n            if (!initial.context) {\n                initial.context = gatherContext(initial.url, initial.line);\n            }\n\n            var reference = / '([^']+)' /.exec(message);\n            if (reference) {\n                initial.column = findSourceInLine(reference[1], initial.url, initial.line);\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        stackInfo.stack[0].context = initial.context;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'args': [],\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if ((source = findSourceByFunctionBody(curr))) {\n                item.url = source.url;\n                item.line = source.line;\n\n                if (item.func === UNKNOWN_FUNCTION) {\n                    item.func = guessFunctionName(item.url, item.line);\n                }\n\n                var reference = / '([^']+)' /.exec(ex.message || ex.description);\n                if (reference) {\n                    item.column = findSourceInLine(reference[1], source.url, source.line);\n                }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'mode': 'callers',\n            'name': ex.name,\n            'message': ex.message,\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            // This must be tried first because Opera 10 *destroys*\n            // its stacktrace property if you try to access the stack\n            // property first!!\n            stack = computeStackTraceFromStacktraceProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceFromOperaMultiLineMessage(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'mode': 'failed'\n        };\n    }\n\n    /**\n     * Logs a stacktrace starting from the previous call and working down.\n     * @param {(number|string)=} depth How many frames deep to trace.\n     * @return {Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceOfCaller(depth) {\n        depth = (depth == null ? 0 : +depth) + 1; // \"+ 1\" because \"ofCaller\" should drop one frame\n        try {\n            throw new Error();\n        } catch (ex) {\n            return computeStackTrace(ex, depth + 1);\n        }\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.guessFunctionName = guessFunctionName;\n    computeStackTrace.gatherContext = gatherContext;\n    computeStackTrace.ofCaller = computeStackTraceOfCaller;\n    computeStackTrace.getSource = getSource;\n\n    return computeStackTrace;\n}());\n\n/**\n * Extends support for global error handling for asynchronous browser\n * functions. Adopted from Closure Library's errorhandler.js\n */\nTraceKit.extendToAsynchronousCallbacks = function () {\n    var _helper = function _helper(fnName) {\n        var originalFn = window[fnName];\n        window[fnName] = function traceKitAsyncExtension() {\n            // Make a copy of the arguments\n            var args = _slice.call(arguments);\n            var originalCallback = args[0];\n            if (typeof (originalCallback) === 'function') {\n                args[0] = TraceKit.wrap(originalCallback);\n            }\n            // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n            // also only supports 2 argument and doesn't care what \"this\" is, so we\n            // can just call the original function directly.\n            if (originalFn.apply) {\n                return originalFn.apply(this, args);\n            } else {\n                return originalFn(args[0], args[1]);\n            }\n        };\n    };\n\n    _helper('setTimeout');\n    _helper('setInterval');\n};\n\n//Default options:\nif (!TraceKit.remoteFetching) {\n  TraceKit.remoteFetching = true;\n}\nif (!TraceKit.collectWindowErrors) {\n  TraceKit.collectWindowErrors = true;\n}\nif (!TraceKit.linesOfContext || TraceKit.linesOfContext < 1) {\n  // 5 lines before, the offending line, 5 lines after\n  TraceKit.linesOfContext = 11;\n}\n\n\n\n// Export to global object\nwindow.TraceKit = TraceKit;\n\n}(typeof window !== 'undefined' ? window : global));\n","export interface IEvent {\r\n  type?:string;\r\n  source?:string;\r\n  date?:Date;\r\n  tags?:string[];\r\n  message?:string;\r\n  geo?:string;\r\n  value?:number;\r\n  data?:any;\r\n  reference_id?:string;\r\n  session_id?:string;\r\n}\r\n\nexport interface ILastReferenceIdManager {\r\n  getLast(): string;\r\n  clearLast(): void;\r\n  setLast(eventId:string): void;\r\n}\r\n\nexport interface ILog {\r\n  info(message:string):void;\r\n  warn(message:string):void;\r\n  error(message:string):void;\r\n}\r\n\n                                          \r\n\r\nexport interface IEventQueue {\r\n  enqueue(event:IEvent):void;\r\n  process():void;\r\n  suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean):void;\r\n}\r\n\n                                                                                                                                   \r\n\r\nexport interface IEnvironmentInfoCollector {\r\n  getEnvironmentInfo(context:EventPluginContext):IEnvironmentInfo;\r\n}\r\n\n                                                                                                               \r\n\r\nexport interface IErrorParser {\r\n  parse(context:EventPluginContext, exception:Error): IError;\r\n}\r\n\n                                                                                                                 \r\n\r\nexport interface IModuleCollector {\r\n  getModules(context:EventPluginContext):IModule[];\r\n}\r\n\n                                                                                                                           \r\n\r\nexport interface IRequestInfoCollector {\r\n  getRequestInfo(context:EventPluginContext):IRequestInfo;\r\n}\r\n\n                                              \r\n\r\nexport interface IStorage<T> {\r\n  save(path:string, value:T):boolean;\r\n  get(path:string):T;\r\n  getList(searchPattern?:string, limit?:number):IStorageItem<T>[];\r\n  remove(path:string):void;\r\n}\r\n\n                                                                                                                                                                                                                                                                                               \r\n\r\nexport interface ISubmissionClient {\r\n  postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void):void;\r\n  postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void;\r\n  getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void;\r\n}\r\n\nr\n\r\nexport interface IConfigurationSettings {\r\n  apiKey?:string;\r\n  serverUrl?:string;\r\n  environmentInfoCollector?:IEnvironmentInfoCollector;\r\n  errorParser?:IErrorParser;\r\n  lastReferenceIdManager?:ILastReferenceIdManager;\r\n  log?:ILog;\r\n  moduleCollector?:IModuleCollector;\r\n  requestInfoCollector?:IRequestInfoCollector;\r\n  submissionBatchSize?:number;\r\n  submissionClient?:ISubmissionClient;\r\n  storage?:IStorage<any>;\r\n  queue?:IEventQueue;\r\n}\r\n\n                                                                                                                                                     \r\n\r\nexport class SettingsManager {\r\n  /**\r\n   * The configuration settings path.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private static _configPath:string = 'ex-server-settings.json';\r\n\r\n  /**\r\n   * A list of handlers that will be fired when the settings change.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private static _handlers:{ (config:Configuration):void }[] = [];\r\n\r\n  private static changed(config:Configuration) {\r\n    var handlers = this._handlers; // optimization for minifier.\r\n    for (var index = 0; index < handlers.length; index++) {\r\n      handlers[index](config);\r\n    }\r\n  }\r\n\r\n  public static onChanged(handler:(config:Configuration) => void) {\r\n    !!handler && this._handlers.push(handler);\r\n  }\r\n\r\n  public static applySavedServerSettings(config:Configuration):void {\r\n    config.log.info('Applying saved settings.');\r\n    config.settings = Utils.merge(config.settings, this.getSavedServerSettings(config));\r\n    this.changed(config);\r\n  }\r\n\r\n  private static getSavedServerSettings(config:Configuration):Object {\r\n    return config.storage.get(this._configPath) || {};\r\n  }\r\n\r\n  public static checkVersion(version:number, config:Configuration):void {\r\n    if (version) {\r\n      var savedConfigVersion = parseInt(<string>config.storage.get(`${this._configPath}-version`));\r\n      if (isNaN(savedConfigVersion) || version > savedConfigVersion) {\r\n        config.log.info(`Updating settings from v${(!isNaN(savedConfigVersion) ? savedConfigVersion : 0)} to v${version}`);\r\n        this.updateSettings(config);\r\n      }\r\n    }\r\n  }\r\n\r\n  public static updateSettings(config:Configuration):void {\r\n    if (!config.isValid) {\r\n      config.log.error('Unable to update settings: ApiKey is not set.');\r\n      return;\r\n    }\r\n\r\n    config.submissionClient.getSettings(config, (response:SettingsResponse) => {\r\n      if (!response || !response.success || !response.settings) {\r\n        return;\r\n      }\r\n\r\n      config.settings = Utils.merge(config.settings, response.settings);\r\n\r\n      // TODO: Store snapshot of settings after reading from config and attributes and use that to revert to defaults.\r\n      // Remove any existing server settings that are not in the new server settings.\r\n      var savedServerSettings = SettingsManager.getSavedServerSettings(config);\r\n      for (var key in savedServerSettings) {\r\n        if (response.settings[key]) {\r\n          continue;\r\n        }\r\n\r\n        delete config.settings[key];\r\n      }\r\n\r\n      var path = SettingsManager._configPath; // optimization for minifier.\r\n      config.storage.save(`${path}-version`, response.settingsVersion);\r\n      config.storage.save(path, response.settings);\r\n\r\n      config.log.info('Updated settings');\r\n      this.changed(config);\r\n    });\r\n  }\r\n}\r\n\n                                                                    \r\n\r\nexport class DefaultLastReferenceIdManager implements ILastReferenceIdManager {\r\n  /**\r\n   * Gets the last event's reference id that was submitted to the server.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _lastReferenceId:string = null;\r\n\r\n  /**\r\n   * Gets the last event's reference id that was submitted to the server.\r\n   * @returns {string}\r\n   */\r\n  getLast(): string {\r\n    return this._lastReferenceId;\r\n  }\r\n\r\n  /**\r\n   * Clears the last event's reference id.\r\n   */\r\n  clearLast():void {\r\n    this._lastReferenceId = null;\r\n  }\r\n\r\n  /**\r\n   * Sets the last event's reference id.\r\n   * @param eventId\r\n   */\r\n  setLast(eventId:string):void {\r\n    this._lastReferenceId = eventId;\r\n  }\r\n}\r\n\n                              \r\n\r\nexport class ConsoleLog implements ILog {\r\n  public info(message:string):void {\r\n    this.log('info', message);\r\n  }\r\n\r\n  public warn(message:string):void {\r\n    this.log('warn', message);\r\n  }\r\n\r\n  public error(message:string):void {\r\n    this.log('error', message);\r\n  }\r\n\r\n  private log(level:string, message:string) {\r\n    if (console && console[level]) {\r\n      console[level](`[${level}] Exceptionless: ${message}`);\r\n    }\r\n  }\r\n}\r\n\n                              \r\n\r\nexport class NullLog implements ILog {\r\n  public info(message:string):void {}\r\n  public warn(message:string):void {}\r\n  public error(message:string):void {}\r\n}\r\n\nexport interface IUserInfo {\r\n  identity?:string;\r\n  name?:string;\r\n  data?:any;\r\n}\r\n\n                                                                                                          \r\n\r\nexport interface IEventPlugin {\r\n  priority?:number;\r\n  name?:string;\r\n  run(context:EventPluginContext, next?:() => void): void;\r\n}\r\n\n                                                                                                                                                                                                                                                \r\n\r\nexport class EventPluginContext {\r\n  public cancelled:boolean;\r\n  public client:ExceptionlessClient;\r\n  public event:IEvent;\r\n  public contextData:ContextData;\r\n\r\n  constructor(client:ExceptionlessClient, event:IEvent, contextData?:ContextData) {\r\n    this.client = client;\r\n    this.event = event;\r\n    this.contextData = contextData ? contextData : new ContextData();\r\n  }\r\n\r\n  public get log(): ILog {\r\n    return this.client.config.log;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \r\n\r\nexport class EventPluginManager {\r\n  public static run(context:EventPluginContext, callback:(context?:EventPluginContext) => void): void {\r\n    var wrap = function (plugin:IEventPlugin, next?:() => void): () => void {\r\n      return () => {\r\n        try {\r\n          if (!context.cancelled) {\r\n            plugin.run(context, next);\r\n          }\r\n        } catch (ex) {\r\n          context.cancelled = true;\r\n          context.log.error(`Error running plugin '${plugin.name}': ${ex.message}. Discarding Event.`);\r\n        }\r\n\r\n        if (context.cancelled && !!callback) {\r\n          callback(context);\r\n        }\r\n      };\r\n    };\r\n\r\n    var plugins:IEventPlugin[] = context.client.config.plugins; // optimization for minifier.\r\n    var wrappedPlugins:{ (): void }[] = [];\r\n    if (!!callback) {\r\n      wrappedPlugins[plugins.length] = wrap({ name: 'cb', priority: 9007199254740992, run: callback }, null);\r\n    }\r\n\r\n    for (var index = plugins.length - 1; index > -1; index--) {\r\n      wrappedPlugins[index] = wrap(plugins[index], !!callback || (index < plugins.length - 1) ? wrappedPlugins[index + 1] : null);\r\n    }\r\n\r\n    wrappedPlugins[0]();\r\n  }\r\n\r\n  public static addDefaultPlugins(config:Configuration): void {\r\n    config.addPlugin(new ConfigurationDefaultsPlugin());\r\n    config.addPlugin(new ErrorPlugin());\r\n    config.addPlugin(new ModuleInfoPlugin());\r\n    config.addPlugin(new RequestInfoPlugin());\r\n    config.addPlugin(new EnvironmentInfoPlugin());\r\n    config.addPlugin(new SubmissionMethodPlugin());\r\n  }\r\n}\r\n\n                                                                                                                                                  \r\n\r\nexport class ReferenceIdPlugin implements IEventPlugin {\r\n  public priority:number = 20;\r\n  public name:string = 'ReferenceIdPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    if ((!context.event.reference_id || context.event.reference_id.length === 0) && context.event.type === 'error') {\r\n      context.event.reference_id = Utils.guid().replace('-', '').substring(0, 10);\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                    \r\n\r\nexport class DefaultEventQueue implements IEventQueue {\r\n  /**\r\n   * The configuration object.\r\n   * @type {Configuration}\r\n   * @private\r\n   */\r\n  private _config:Configuration;\r\n\r\n  /**\r\n   * Suspends processing until the specified time.\r\n   * @type {Date}\r\n   * @private\r\n   */\r\n  private _suspendProcessingUntil:Date;\r\n\r\n  /**\r\n   * Discards queued items until the specified time.\r\n   * @type {Date}\r\n   * @private\r\n   */\r\n  private _discardQueuedItemsUntil:Date;\r\n\r\n  /**\r\n   * Returns true if the queue is processing.\r\n   * @type {boolean}\r\n   * @private\r\n   */\r\n  private _processingQueue:boolean = false;\r\n\r\n  /**\r\n   * Processes the queue every xx seconds.\r\n   * @type {Timer}\r\n   * @private\r\n   */\r\n  private _queueTimer:any;\r\n\r\n  constructor(config:Configuration) {\r\n    this._config = config;\r\n  }\r\n\r\n  public enqueue(event:IEvent): void {\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n    this.ensureQueueTimer();\r\n\r\n    if (this.areQueuedItemsDiscarded()) {\r\n      config.log.info('Queue items are currently being discarded. The event will not be queued.');\r\n      return;\r\n    }\r\n\r\n    var key = `ex-q-${new Date().toJSON()}-${Utils.randomNumber()}`;\r\n    config.log.info(`Enqueuing event: ${key} type=${event.type} ${!!event.reference_id ? 'refid=' + event.reference_id : ''}`);\r\n    config.storage.save(key, event);\r\n  }\r\n\r\n  public process(): void {\r\n    function getEvents(events:{ path:string, value:IEvent }[]):IEvent[] {\r\n      var items:IEvent[] = [];\r\n      for (var index = 0; index < events.length; index++) {\r\n        items.push(events[index].value);\r\n      }\r\n\r\n      return items;\r\n    }\r\n\r\n    const queueNotProcessed:string = 'The queue will not be processed.'; // optimization for minifier.\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n    var log:ILog = config.log; // Optimization for minifier.\r\n\r\n    this.ensureQueueTimer();\r\n\r\n    if (this._processingQueue) {\r\n      return;\r\n    }\r\n\r\n    log.info('Processing queue...');\r\n    if (!config.enabled) {\r\n      log.info(`Configuration is disabled. ${queueNotProcessed}`);\r\n      return;\r\n    }\r\n\r\n    if (!config.isValid) {\r\n      log.info(`Invalid Api Key. ${queueNotProcessed}`);\r\n      return;\r\n    }\r\n\r\n    this._processingQueue = true;\r\n\r\n    try {\r\n      var events = config.storage.getList('ex-q', config.submissionBatchSize);\r\n      if (!events || events.length == 0) {\r\n        this._processingQueue = false;\r\n        return;\r\n      }\r\n\r\n      log.info(`Sending ${events.length} events to ${config.serverUrl}.`);\r\n      config.submissionClient.postEvents(getEvents(events), config, (response:SubmissionResponse) => {\r\n        this.processSubmissionResponse(response, events);\r\n        log.info('Finished processing queue.');\r\n        this._processingQueue = false;\r\n      });\r\n    } catch (ex) {\r\n      log.error(`Error processing queue: ${ex}`);\r\n      this.suspendProcessing();\r\n      this._processingQueue = false;\r\n    }\r\n  }\r\n\r\n  private processSubmissionResponse(response:SubmissionResponse, events:{ path:string, value:IEvent }[]): void {\r\n    const noSubmission:string = 'The event will not be submitted.'; // Optimization for minifier.\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n    var log:ILog = config.log; // Optimization for minifier.\r\n\r\n    if (response.success) {\r\n      log.info(`Sent ${events.length} events.`);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.serviceUnavailable) {\r\n      // You are currently over your rate limit or the servers are under stress.\r\n      log.error('Server returned service unavailable.');\r\n      this.suspendProcessing();\r\n      return;\r\n    }\r\n\r\n    if (response.paymentRequired) {\r\n      // If the organization over the rate limit then discard the event.\r\n      log.info('Too many events have been submitted, please upgrade your plan.');\r\n      this.suspendProcessing(null, true, true);\r\n      return;\r\n    }\r\n\r\n    if (response.unableToAuthenticate) {\r\n      // The api key was suspended or could not be authorized.\r\n      log.info(`Unable to authenticate, please check your configuration. ${noSubmission}`);\r\n      this.suspendProcessing(15);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.notFound || response.badRequest) {\r\n      // The service end point could not be found.\r\n      log.error(`Error while trying to submit data: ${response.message}`);\r\n      this.suspendProcessing(60 * 4);\r\n      this.removeEvents(events);\r\n      return;\r\n    }\r\n\r\n    if (response.requestEntityTooLarge) {\r\n      var message = 'Event submission discarded for being too large.';\r\n      if (config.submissionBatchSize > 1) {\r\n        log.error(`${message} Retrying with smaller batch size.`);\r\n        config.submissionBatchSize = Math.max(1, Math.round(config.submissionBatchSize / 1.5));\r\n      } else {\r\n        log.error(`${message} ${noSubmission}`);\r\n        this.removeEvents(events);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!response.success) {\r\n      log.error(`Error submitting events: ${response.message || 'Please check the network tab for more info.'}`);\r\n      this.suspendProcessing();\r\n    }\r\n  }\r\n\r\n  private ensureQueueTimer(): void {\r\n    if (!this._queueTimer) {\r\n      this._queueTimer = setInterval(() => this.onProcessQueue(), 10000);\r\n    }\r\n  }\r\n\r\n  private onProcessQueue(): void {\r\n    if (!this.isQueueProcessingSuspended() && !this._processingQueue) {\r\n      this.process();\r\n    }\r\n  }\r\n\r\n  public suspendProcessing(durationInMinutes?:number, discardFutureQueuedItems?:boolean, clearQueue?:boolean): void {\r\n    var config:Configuration = this._config; // Optimization for minifier.\r\n\r\n    if (!durationInMinutes || durationInMinutes <= 0) {\r\n      durationInMinutes = 5;\r\n    }\r\n\r\n    config.log.info(`Suspending processing for ${durationInMinutes} minutes.`);\r\n    this._suspendProcessingUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\r\n\r\n    if (discardFutureQueuedItems) {\r\n      this._discardQueuedItemsUntil = new Date(new Date().getTime() + (durationInMinutes * 60000));\r\n    }\r\n\r\n    if (clearQueue) {\r\n      // Account is over the limit and we want to ensure that the sample size being sent in will contain newer errors.\r\n      this.removeEvents(config.storage.getList('ex-q'));\r\n    }\r\n  }\r\n\r\n  private removeEvents(events:{ path:string, value:IEvent }[]) {\r\n    for (var index = 0; index < (events || []).length; index++) {\r\n      this._config.storage.remove(events[index].path);\r\n    }\r\n  }\r\n\r\n  private isQueueProcessingSuspended(): boolean {\r\n    return this._suspendProcessingUntil && this._suspendProcessingUntil > new Date();\r\n  }\r\n\r\n  private areQueuedItemsDiscarded(): boolean {\r\n    return this._discardQueuedItemsUntil && this._discardQueuedItemsUntil > new Date();\r\n  }\r\n}\r\n\n                                                                                                                                  \r\n\r\nexport class InMemoryStorage<T> implements IStorage<T> {\r\n  private _items:IStorageItem<T>[] = [];\r\n  private _maxItems:number;\r\n\r\n  constructor(maxItems?:number) {\r\n    this._maxItems = maxItems > 0 ? maxItems : 250;\r\n  }\r\n\r\n  public save(path:string, value:T):boolean {\r\n    if (!path || !value) {\r\n      return false;\r\n    }\r\n\r\n    this.remove(path);\r\n    if (this._items.push({ created: new Date().getTime(), path: path, value: value }) > this._maxItems) {\r\n      this._items.shift();\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public get(path:string):T {\r\n    var item:IStorageItem<T> = path ? this.getList(`^${path}$`, 1)[0] : null;\r\n    return item ? item.value : null;\r\n  }\r\n\r\n  public getList(searchPattern?:string, limit?:number):IStorageItem<T>[] {\r\n    var items = this._items; // Optimization for minifier\r\n    if (!searchPattern) {\r\n      return items.slice(0, limit);\r\n    }\r\n\r\n    var regex = new RegExp(searchPattern);\r\n    var results:IStorageItem<T>[] = [];\r\n    for (var index = 0; index < items.length; index++) {\r\n      if (regex.test(items[index].path)) {\r\n        results.push(items[index]);\r\n\r\n        if (results.length >= limit) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public remove(path:string):void {\r\n    if (path) {\r\n      var item = this.getList(`^${path}$`, 1)[0];\r\n      if (item) {\r\n        this._items.splice(this._items.indexOf(item), 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\n                                                 \r\n\r\nexport class Utils {\r\n  public static addRange<T>(target:T[], ...values:T[]) {\r\n    if (!target) {\r\n      target = [];\r\n    }\r\n\r\n    if (!values || values.length === 0) {\r\n      return target;\r\n    }\r\n\r\n    for (var index = 0; index < values.length; index++) {\r\n      if (values[index] && target.indexOf(values[index]) < 0) {\r\n        target.push(values[index]);\r\n      }\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  public static getHashCode(source:string): string {\r\n    if (!source || source.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var hash:number = 0;\r\n    for (var index = 0; index < source.length; index++) {\r\n      var character   = source.charCodeAt(index);\r\n      hash  = ((hash << 5) - hash) + character;\r\n      hash |= 0;\r\n    }\r\n\r\n    return hash.toString();\r\n  }\r\n\r\n  public static getCookies(cookies:string): Object {\r\n    var result:Object = {};\r\n\r\n    var parts:string[] = (cookies || '').split('; ');\r\n    for (var index = 0; index < parts.length; index++) {\r\n      var cookie:string[] = parts[index].split('=');\r\n      result[cookie[0]] = cookie[1];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static guid(): string {\r\n    function s4() {\r\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n    }\r\n\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n  }\r\n\r\n  public static merge(defaultValues:Object, values:Object) {\r\n    var result:Object = {};\r\n\r\n    for (var key in defaultValues || {}) {\r\n      if (!!defaultValues[key]) {\r\n        result[key] = defaultValues[key];\r\n      }\r\n    }\r\n\r\n    for (var key in values || {}) {\r\n      if (!!values[key]) {\r\n        result[key] = values[key];\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static parseVersion(source:string): string {\r\n    if (!source) {\r\n      return null;\r\n    }\r\n\r\n    var versionRegex = /(v?((\\d+)\\.(\\d+)(\\.(\\d+))?)(?:-([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?(?:\\+([\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*))?)/;\r\n    var matches = versionRegex.exec(source);\r\n    if (matches && matches.length > 0) {\r\n      return matches[0];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public static parseQueryString(query:string) {\r\n    if (!query || query.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var pairs:string[] = query.split('&');\r\n    if (pairs.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    var result:Object = {};\r\n    for (var index = 0; index < pairs.length; index++) {\r\n      var pair = pairs[index].split('=');\r\n      result[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public static randomNumber(): number {\r\n    return Math.floor(Math.random() * 9007199254740992);\r\n  }\r\n\r\n  public static stringify(data:any, exclusions?:string[]): string {\r\n    function checkForMatch(pattern:string, value:string): boolean {\r\n      if (!pattern || !value || typeof value !== 'string') {\r\n        return false;\r\n      }\r\n\r\n      var trim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\r\n      pattern = pattern.toLowerCase().replace(trim, '');\r\n      value = value.toLowerCase().replace(trim, '');\r\n\r\n      if (pattern.length <= 0) {\r\n        return false;\r\n      }\r\n\r\n      var startsWithWildcard:boolean = pattern[0] === '*';\r\n      if (startsWithWildcard) {\r\n        pattern = pattern.slice(1);\r\n      }\r\n\r\n      var endsWithWildcard:boolean = pattern[pattern.length - 1] === '*';\r\n      if (endsWithWildcard) {\r\n        pattern = pattern.substring(0, pattern.length - 1);\r\n      }\r\n\r\n      if (startsWithWildcard && endsWithWildcard)\r\n        return value.indexOf(pattern) !== -1;\r\n\r\n      if (startsWithWildcard)\r\n        return value.lastIndexOf(pattern) === (value.length - pattern.length);\r\n\r\n      if (endsWithWildcard)\r\n        return value.indexOf(pattern) === 0;\r\n\r\n      return value === pattern;\r\n    }\r\n\r\n    function stringifyImpl(data:any, exclusions:string[]): string {\r\n      var cache:string[] = [];\r\n      return JSON.stringify(data, function(key:string, value:any) {\r\n        for (var index = 0; index < (exclusions || []).length; index++) {\r\n          if (checkForMatch(exclusions[index], key)){\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (typeof value === 'object' && !!value) {\r\n          if (cache.indexOf(value) !== -1) {\r\n            // Circular reference found, discard key\r\n            return;\r\n          }\r\n\r\n          cache.push(value);\r\n        }\r\n\r\n        return value;\r\n      });\r\n    }\r\n\r\n    if (({}).toString.call(data) === '[object Array]') {\r\n      var result = [];\r\n      for (var index = 0; index < data.length; index++) {\r\n        result[index] = JSON.parse(stringifyImpl(data[index], exclusions || []));\r\n      }\r\n\r\n      return JSON.stringify(result);\r\n    }\r\n\r\n    return stringifyImpl(data, exclusions || []);\r\n  }\r\n}\r\n\nr\n\r\nexport class Configuration implements IConfigurationSettings {\r\n  /**\r\n   * A default list of tags that will automatically be added to every\r\n   * report submitted to the server.\r\n   *\r\n   * @type {Array}\r\n   */\r\n  public defaultTags:string[] = [];\r\n\r\n  /**\r\n   * A default list of of extended data objects that will automatically\r\n   * be added to every report submitted to the server.\r\n   *\r\n   * @type {{}}\r\n   */\r\n  public defaultData:Object = {};\r\n\r\n  /**\r\n   * Whether the client is currently enabled or not. If it is disabled,\r\n   * submitted errors will be discarded and no data will be sent to the server.\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  public enabled:boolean = true;\r\n\r\n  public environmentInfoCollector:IEnvironmentInfoCollector;\r\n  public errorParser:IErrorParser;\r\n  public lastReferenceIdManager:ILastReferenceIdManager = new DefaultLastReferenceIdManager();\r\n  public log:ILog;\r\n  public moduleCollector:IModuleCollector;\r\n  public requestInfoCollector:IRequestInfoCollector;\r\n\r\n  /**\r\n   * Maximum number of events that should be sent to the server together in a batch. (Defaults to 50)\r\n   */\r\n  public submissionBatchSize:number;\r\n  public submissionClient:ISubmissionClient;\r\n\r\n  /**\r\n   * Contains a dictionary of custom settings that can be used to control\r\n   * the client and will be automatically updated from the server.\r\n   */\r\n  public settings:Object = {};\r\n\r\n  public storage:IStorage<Object>;\r\n\r\n  public queue:IEventQueue;\r\n\r\n  constructor(configSettings?:IConfigurationSettings) {\r\n    function inject(fn:any) {\r\n      return typeof fn === 'function' ? fn(this) : fn;\r\n    }\r\n\r\n    configSettings = Utils.merge(Configuration.defaults, configSettings);\r\n\r\n    this.log = inject(configSettings.log) || new NullLog();\r\n    this.apiKey = configSettings.apiKey;\r\n    this.serverUrl = configSettings.serverUrl;\r\n\r\n    this.environmentInfoCollector = inject(configSettings.environmentInfoCollector);\r\n    this.errorParser = inject(configSettings.errorParser);\r\n    this.lastReferenceIdManager = inject(configSettings.lastReferenceIdManager) || new DefaultLastReferenceIdManager();\r\n    this.moduleCollector = inject(configSettings.moduleCollector);\r\n    this.requestInfoCollector = inject(configSettings.requestInfoCollector);\r\n    this.submissionBatchSize = inject(configSettings.submissionBatchSize) || 50;\r\n    this.submissionClient = inject(configSettings.submissionClient);\r\n    this.storage = inject(configSettings.storage) || new InMemoryStorage<any>();\r\n    this.queue = inject(configSettings.queue) || new DefaultEventQueue(this);\r\n\r\n    SettingsManager.applySavedServerSettings(this);\r\n    EventPluginManager.addDefaultPlugins(this);\r\n  }\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _apiKey:string;\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @returns {string}\r\n   */\r\n  public get apiKey():string {\r\n    return this._apiKey;\r\n  }\r\n\r\n  /**\r\n   * The API key that will be used when sending events to the server.\r\n   * @param value\r\n   */\r\n  public set apiKey(value:string) {\r\n    this._apiKey = value || null;\r\n    this.log.info(`apiKey: ${this._apiKey}`);\r\n  }\r\n\r\n  /**\r\n   * Returns true if the apiKey is valid.\r\n   * @returns {boolean}\r\n   */\r\n  public get isValid():boolean {\r\n    return !!this.apiKey && this.apiKey.length >= 10;\r\n  }\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  private _serverUrl:string = 'https://collector.exceptionless.io';\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @returns {string}\r\n   */\r\n  public get serverUrl():string {\r\n    return this._serverUrl;\r\n  }\r\n\r\n  /**\r\n   * The server url that all events will be sent to.\r\n   * @param value\r\n   */\r\n  public set serverUrl(value:string) {\r\n    if (!!value) {\r\n      this._serverUrl = value;\r\n      this.log.info(`serverUrl: ${this._serverUrl}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A list of exclusion patterns.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _dataExclusions:string[] = [];\r\n\r\n  /**\r\n   *  A list of exclusion patterns that will automatically remove any data that\r\n   *  matches them from any data submitted to the server.\r\n   *\r\n   *  For example, entering CreditCard will remove any extended data properties,\r\n   *  form fields, cookies and query parameters from the report.\r\n   *\r\n   * @returns {string[]}\r\n   */\r\n  public get dataExclusions():string[] {\r\n    var exclusions:string = this.settings['@@DataExclusions'];\r\n    return this._dataExclusions.concat(exclusions && exclusions.split(',') || []);\r\n  }\r\n\r\n  /**\r\n   * Add items to the list of exclusion patterns that will automatically remove any\r\n   * data that matches them from any data submitted to the server.\r\n   *\r\n   * For example, entering CreditCard will remove any extended data properties, form\r\n   * fields, cookies and query parameters from the report.\r\n   *\r\n   * @param exclusions\r\n   */\r\n  public addDataExclusions(...exclusions:string[]) {\r\n    this._dataExclusions = Utils.addRange<string>(this._dataExclusions, ...exclusions);\r\n  }\r\n\r\n  /**\r\n   * The list of plugins that will be used in this configuration.\r\n   * @type {Array}\r\n   * @private\r\n   */\r\n  private _plugins:IEventPlugin[] = [];\r\n\r\n  /**\r\n   * The list of plugins that will be used in this configuration.\r\n   * @returns {IEventPlugin[]}\r\n   */\r\n  public get plugins():IEventPlugin[] {\r\n    return this._plugins.sort((p1:IEventPlugin, p2:IEventPlugin) => {\r\n      return (p1.priority < p2.priority) ? -1 : (p1.priority > p2.priority) ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Register an plugin to be used in this configuration.\r\n   * @param plugin\r\n   */\r\n  public addPlugin(plugin:IEventPlugin): void;\r\n\r\n  /**\r\n   * Register an plugin to be used in this configuration.\r\n   * @param name The name used to identify the plugin.\r\n   * @param priority Used to determine plugins priority.\r\n   * @param pluginAction A function that is run.\r\n   */\r\n  public addPlugin(name:string, priority:number, pluginAction:(context:EventPluginContext, next?:() => void) => void): void;\r\n  public addPlugin(pluginOrName:IEventPlugin|string, priority?:number, pluginAction?:(context:EventPluginContext, next?:() => void) => void): void {\r\n    var plugin:IEventPlugin = !!pluginAction ? { name: <string>pluginOrName, priority: priority, run: pluginAction } : <IEventPlugin>pluginOrName;\r\n    if (!plugin || !plugin.run) {\r\n      this.log.error('Add plugin failed: Run method not defined');\r\n      return;\r\n    }\r\n\r\n    if (!plugin.name) {\r\n      plugin.name = Utils.guid();\r\n    }\r\n\r\n    if (!plugin.priority) {\r\n      plugin.priority = 0;\r\n    }\r\n\r\n    var pluginExists:boolean = false;\r\n    var plugins = this._plugins; // optimization for minifier.\r\n    for (var index = 0; index < plugins.length; index++) {\r\n      if (plugins[index].name === plugin.name) {\r\n        pluginExists = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!pluginExists) {\r\n      plugins.push(plugin);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the plugin from this configuration.\r\n   * @param plugin\r\n   */\r\n  public removePlugin(plugin:IEventPlugin): void;\r\n\r\n  /**\r\n   * Remove an plugin by key from this configuration.\r\n   * @param name\r\n   */\r\n  public removePlugin(name:string): void;\r\n  public removePlugin(pluginOrName:IEventPlugin|string): void {\r\n    var name:string = typeof pluginOrName === 'string' ? pluginOrName : pluginOrName.name;\r\n    if (!name) {\r\n      this.log.error('Remove plugin failed: Plugin name not defined');\r\n      return;\r\n    }\r\n\r\n    var plugins = this._plugins; // optimization for minifier.\r\n    for (var index = 0; index < plugins.length; index++) {\r\n      if (plugins[index].name === name) {\r\n        plugins.splice(index, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Automatically set the application version for events.\r\n   * @param version\r\n   */\r\n  public setVersion(version:string): void {\r\n    if (!!version) {\r\n      this.defaultData['@version'] = version;\r\n    }\r\n  }\r\n\r\n  public setUserIdentity(userInfo:IUserInfo): void;\r\n  public setUserIdentity(identity:string): void;\r\n  public setUserIdentity(identity:string, name:string): void;\r\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): void {\r\n    const USER_KEY:string = '@user'; // optimization for minifier.\r\n    var userInfo:IUserInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n\r\n    var shouldRemove:boolean = !userInfo || (!userInfo.identity && !userInfo.name);\r\n    if (shouldRemove) {\r\n      delete this.defaultData[USER_KEY];\r\n    } else {\r\n      this.defaultData[USER_KEY] = userInfo;\r\n    }\r\n\r\n    this.log.info(`user identity: ${shouldRemove ? 'null' : userInfo.identity}`);\r\n  }\r\n\r\n  /**\r\n   * Used to identify the client that sent the events to the server.\r\n   * @returns {string}\r\n   */\r\n  public get userAgent():string {\r\n    return 'exceptionless-js/1.0.0.0';\r\n  }\r\n\r\n  /**\r\n   * Automatically set a reference id for error events.\r\n   */\r\n  public useReferenceIds(): void {\r\n    this.addPlugin(new ReferenceIdPlugin());\r\n  }\r\n\r\n  // TODO: Support a min log level.\r\n  public useDebugLogger(): void {\r\n    this.log = new ConsoleLog();\r\n  }\r\n\r\n  /**\r\n   * The default configuration settings that are applied to new configuration instances.\r\n   * @type {IConfigurationSettings}\r\n   * @private\r\n   */\r\n  private static _defaultSettings:IConfigurationSettings = null;\r\n\r\n  /**\r\n   * The default configuration settings that are applied to new configuration instances.\r\n   * @returns {IConfigurationSettings}\r\n   */\r\n  public static get defaults() {\r\n    if (Configuration._defaultSettings === null) {\r\n      Configuration._defaultSettings = {};\r\n    }\r\n\r\n    return Configuration._defaultSettings;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                                                                                                                                                                                  \r\n\r\nexport class EventBuilder {\r\n  private _validIdentifierErrorMessage:string = \"must contain between 8 and 100 alphanumeric or '-' characters.\"; // optimization for minifier.\r\n\r\n  public target:IEvent;\r\n  public client:ExceptionlessClient;\r\n  public pluginContextData:ContextData;\r\n\r\n  constructor(event:IEvent, client:ExceptionlessClient, pluginContextData?:ContextData) {\r\n    this.target = event;\r\n    this.client = client;\r\n    this.pluginContextData = pluginContextData || new ContextData();\r\n  }\r\n\r\n  public setType(type:string): EventBuilder {\r\n    if (!!type) {\r\n      this.target.type = type;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setSource(source:string): EventBuilder {\r\n    if (!!source) {\r\n      this.target.source = source;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setSessionId(sessionId:string): EventBuilder {\r\n    if (!this.isValidIdentifier(sessionId)) {\r\n      throw new Error(`SessionId ${this._validIdentifierErrorMessage}`);\r\n    }\r\n\r\n    this.target.session_id = sessionId;\r\n    return this;\r\n  }\r\n\r\n  public setReferenceId(referenceId:string): EventBuilder {\r\n    if (!this.isValidIdentifier(referenceId)) {\r\n      throw new Error(`ReferenceId ${this._validIdentifierErrorMessage}`);\r\n    }\r\n\r\n    this.target.reference_id = referenceId;\r\n    return this;\r\n  }\r\n\r\n  public setMessage(message:string): EventBuilder {\r\n    if (!!message) {\r\n      this.target.message = message;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public setGeo(latitude: number, longitude: number): EventBuilder {\r\n    if (latitude < -90.0 || latitude > 90.0)\r\n      throw new Error('Must be a valid latitude value between -90.0 and 90.0.');\r\n    if (longitude < -180.0 || longitude > 180.0)\r\n      throw new Error('Must be a valid longitude value between -180.0 and 180.0.');\r\n\r\n    this.target.geo = `${latitude},${longitude}`;\r\n    return this;\r\n  }\r\n\r\n  public setUserIdentity(userInfo:IUserInfo): EventBuilder;\r\n  public setUserIdentity(identity:string): EventBuilder;\r\n  public setUserIdentity(identity:string, name:string): EventBuilder;\r\n  public setUserIdentity(userInfoOrIdentity:IUserInfo|string, name?:string): EventBuilder {\r\n    var userInfo = typeof userInfoOrIdentity !== 'string' ? userInfoOrIdentity : { identity: userInfoOrIdentity, name: name };\r\n    if (!userInfo || (!userInfo.identity && !userInfo.name)) {\r\n      return this;\r\n    }\r\n\r\n    this.setProperty('@user', userInfo);\r\n    return this;\r\n  }\r\n\r\n  public setValue(value:number): EventBuilder {\r\n    if (!!value) {\r\n      this.target.value = value;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addTags(...tags:string[]): EventBuilder {\r\n    this.target.tags = Utils.addRange<string>(this.target.tags, ...tags);\r\n    return this;\r\n  }\r\n\r\n  public setProperty(name:string, value:any): EventBuilder {\r\n    if (!name || (value === undefined || value == null)) {\r\n      return this;\r\n    }\r\n\r\n    if (!this.target.data) {\r\n      this.target.data = {};\r\n    }\r\n\r\n    this.target.data[name] = value;\r\n    return this;\r\n  }\r\n\r\n  public markAsCritical(critical:boolean): EventBuilder {\r\n    if (critical) {\r\n      this.addTags('Critical');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public addRequestInfo(request:Object): EventBuilder {\r\n    if (!!request) {\r\n      this.pluginContextData['@request'] = request;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public submit(callback?:(context:EventPluginContext) => void): void {\r\n    this.client.submitEvent(this.target, this.pluginContextData, callback);\r\n  }\r\n\r\n  private isValidIdentifier(value:string): boolean {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    if (value.length < 8 || value.length > 100) {\r\n      return false;\r\n    }\r\n\r\n    for (var index = 0; index < value.length; index++) {\r\n      var code = value.charCodeAt(index);\r\n      var isDigit = (code >= 48) && (code <= 57);\r\n      var isLetter = ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));\r\n      var isMinus = code === 45;\r\n\r\n      if (!(isDigit || isLetter) && !isMinus) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\n                                                                                  \r\n\r\nexport interface IError extends IInnerError {\r\n  modules?:IModule[]\r\n}\r\n\nexport interface IUserDescription {\r\n  email_address?:string;\r\n  description?:string;\r\n  data?:any;\r\n}\r\n\nexport class ContextData {\r\n  public setException(exception:Error): void {\r\n    if (exception) {\r\n      this['@@_Exception'] = exception;\r\n    }\r\n  }\r\n\r\n  public get hasException(): boolean {\r\n    return !!this['@@_Exception']\r\n  }\r\n\r\n  public getException(): Error {\r\n    return this['@@_Exception'] || null;\r\n  }\r\n\r\n  public markAsUnhandledError(): void {\r\n    this['@@_IsUnhandledError'] = true;\r\n  }\r\n\r\n  public get isUnhandledError(): boolean {\r\n    return !!this['@@_IsUnhandledError'];\r\n  }\r\n\r\n  public setSubmissionMethod(method:string): void {\r\n    if (method) {\r\n      this['@@_SubmissionMethod'] = method;\r\n    }\r\n  }\r\n\r\n  public getSubmissionMethod(): string {\r\n    return this['@@_SubmissionMethod'] || null;\r\n  }\r\n}\r\n\nexport class SubmissionResponse {\r\n  success:boolean = false;\r\n  badRequest:boolean = false;\r\n  serviceUnavailable:boolean = false;\r\n  paymentRequired:boolean = false;\r\n  unableToAuthenticate:boolean = false;\r\n  notFound:boolean = false;\r\n  requestEntityTooLarge:boolean = false;\r\n  statusCode:number;\r\n  message:string;\r\n\r\n  constructor(statusCode:number, message?:string) {\r\n    this.statusCode = statusCode;\r\n    this.message = message;\r\n\r\n    this.success = statusCode >= 200 && statusCode <= 299;\r\n    this.badRequest = statusCode === 400;\r\n    this.serviceUnavailable = statusCode === 503;\r\n    this.paymentRequired = statusCode === 402;\r\n    this.unableToAuthenticate = statusCode === 401 || statusCode === 403;\r\n    this.notFound = statusCode === 404;\r\n    this.requestEntityTooLarge = statusCode === 413;\r\n  }\r\n}\r\n\nr\n\r\nexport class ExceptionlessClient {\r\n  public config:Configuration;\r\n\r\n  constructor();\r\n  constructor(settings:IConfigurationSettings);\r\n  constructor(apiKey:string, serverUrl?:string);\r\n  constructor(settingsOrApiKey?:IConfigurationSettings|string, serverUrl?:string) {\r\n    if (typeof settingsOrApiKey !== 'object') {\r\n      this.config = new Configuration(settingsOrApiKey);\r\n    } else {\r\n      this.config = new Configuration({ apiKey: <string>settingsOrApiKey, serverUrl: serverUrl });\r\n    }\r\n  }\r\n\r\n  public createException(exception:Error): EventBuilder {\r\n    var pluginContextData = new ContextData();\r\n    pluginContextData.setException(exception);\r\n    return this.createEvent(pluginContextData).setType('error');\r\n  }\r\n\r\n  public submitException(exception:Error, callback?:(context:EventPluginContext) => void): void {\r\n    this.createException(exception).submit(callback);\r\n  }\r\n\r\n  public createUnhandledException(exception:Error, submissionMethod?:string): EventBuilder {\r\n    var builder = this.createException(exception);\r\n    builder.pluginContextData.markAsUnhandledError();\r\n    builder.pluginContextData.setSubmissionMethod(submissionMethod);\r\n\r\n    return builder;\r\n  }\r\n\r\n  public submitUnhandledException(exception:Error, submissionMethod?:string, callback?:(context:EventPluginContext) => void) {\r\n    this.createUnhandledException(exception, submissionMethod).submit(callback);\r\n  }\r\n\r\n  public createFeatureUsage(feature:string): EventBuilder {\r\n    return this.createEvent().setType('usage').setSource(feature);\r\n  }\r\n\r\n  public submitFeatureUsage(feature:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createFeatureUsage(feature).submit(callback);\r\n  }\r\n\r\n  public createLog(message:string): EventBuilder;\r\n  public createLog(source:string, message:string): EventBuilder;\r\n  public createLog(source:string, message:string, level:string): EventBuilder;\r\n  public createLog(sourceOrMessage:string, message?:string, level?:string): EventBuilder {\r\n    var builder = this.createEvent().setType('log');\r\n\r\n    if (message && level) {\r\n      builder = builder.setSource(sourceOrMessage).setMessage(message).setProperty('@level', level);\r\n    } else if (message) {\r\n      builder = builder.setSource(sourceOrMessage).setMessage(message);\r\n    } else {\r\n      // TODO: Look into using https://www.stevefenton.co.uk/Content/Blog/Date/201304/Blog/Obtaining-A-Class-Name-At-Runtime-In-TypeScript/\r\n      var caller:any = arguments.callee.caller;\r\n      builder = builder.setSource(caller && caller.name).setMessage(sourceOrMessage);\r\n    }\r\n\r\n    return builder;\r\n  }\r\n\r\n  public submitLog(message:string): void;\r\n  public submitLog(source:string, message:string): void;\r\n  public submitLog(source:string, message:string, level:string, callback?:(context:EventPluginContext) => void): void;\r\n  public submitLog(sourceOrMessage:string, message?:string, level?:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createLog(sourceOrMessage, message, level).submit(callback);\r\n  }\r\n\r\n  public createNotFound(resource:string): EventBuilder {\r\n    return this.createEvent().setType('404').setSource(resource);\r\n  }\r\n\r\n  public submitNotFound(resource:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createNotFound(resource).submit(callback);\r\n  }\r\n\r\n  public createSessionStart(sessionId:string): EventBuilder {\r\n    return this.createEvent().setType('start').setSessionId(sessionId);\r\n  }\r\n\r\n  public submitSessionStart(sessionId:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createSessionStart(sessionId).submit(callback);\r\n  }\r\n\r\n  public createSessionEnd(sessionId:string): EventBuilder {\r\n    return this.createEvent().setType('end').setSessionId(sessionId);\r\n  }\r\n\r\n  public submitSessionEnd(sessionId:string, callback?:(context:EventPluginContext) => void): void {\r\n    this.createSessionEnd(sessionId).submit(callback);\r\n  }\r\n\r\n  public createEvent(pluginContextData?:ContextData): EventBuilder {\r\n    return new EventBuilder({ date: new Date() }, this, pluginContextData);\r\n  }\r\n\r\n  /**\r\n   * Submits the event to be sent to the server.\r\n   * @param event The event data.\r\n   * @param pluginContextData Any contextual data objects to be used by Exceptionless plugins to gather default information for inclusion in the report information.\r\n   * @param callback\r\n   */\r\n  public submitEvent(event:IEvent, pluginContextData?:ContextData, callback?:(context:EventPluginContext) => void): void {\r\n    function cancelled() {\r\n      if (!!context) {\r\n        context.cancelled = true;\r\n      }\r\n\r\n      return !!callback && callback(context);\r\n    }\r\n\r\n    if (!event) {\r\n      return cancelled();\r\n    }\r\n\r\n    if (!this.config.enabled) {\r\n      this.config.log.info('Event submission is currently disabled.');\r\n      return cancelled();\r\n    }\r\n\r\n    if (!event.data) {\r\n      event.data = {};\r\n    }\r\n\r\n    if (!event.tags || !event.tags.length) {\r\n      event.tags = [];\r\n    }\r\n\r\n    var context = new EventPluginContext(this, event, pluginContextData);\r\n    EventPluginManager.run(context, function (context:EventPluginContext) {\r\n      let ev = context.event;\r\n      if (!context.cancelled) {\r\n        // ensure all required data\r\n        if (!ev.type || ev.type.length === 0) {\r\n          ev.type = 'log';\r\n        }\r\n\r\n        if (!ev.date) {\r\n          ev.date = new Date();\r\n        }\r\n\r\n        var config = context.client.config;\r\n        config.queue.enqueue(ev);\r\n\r\n        if (ev.reference_id && ev.reference_id.length > 0) {\r\n          context.log.info(`Setting last reference id '${ev.reference_id}'`);\r\n          config.lastReferenceIdManager.setLast(ev.reference_id);\r\n        }\r\n      }\r\n\r\n      !!callback && callback(context);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the user's email address and description of an event for the specified reference id.\r\n   * @param referenceId The reference id of the event to update.\r\n   * @param email The user's email address to set on the event.\r\n   * @param description The user's description of the event.\r\n   */\r\n  public updateUserEmailAndDescription(referenceId:string, email:string, description:string, callback?:(response:SubmissionResponse) => void) {\r\n    if (!referenceId || !email || !description || !this.config.enabled) {\r\n      return !!callback && callback(new SubmissionResponse(500, 'cancelled'));\r\n    }\r\n\r\n    var userDescription:IUserDescription = { email_address: email, description: description };\r\n    var response = this.config.submissionClient.postUserDescription(referenceId, userDescription, this.config, (response:SubmissionResponse) => {\r\n      if (!response.success) {\r\n        this.config.log.error(`Failed to submit user email and description for event '${referenceId}': ${response.statusCode} ${response.message}`)\r\n      }\r\n\r\n      !!callback && callback(response);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the last event client id that was submitted to the server.\r\n   * @returns {string} The event client id.\r\n   */\r\n  public getLastReferenceId(): string {\r\n    return this.config.lastReferenceIdManager.getLast();\r\n  }\r\n\r\n  /**\r\n   * The default ExceptionlessClient instance.\r\n   * @type {ExceptionlessClient}\r\n   * @private\r\n   */\r\n  private static _instance:ExceptionlessClient = null;\r\n\r\n\r\n  /**\r\n   * The default ExceptionlessClient instance.\r\n   * @type {ExceptionlessClient}\r\n   */\r\n  public static get default() {\r\n    if(ExceptionlessClient._instance === null) {\r\n      ExceptionlessClient._instance = new ExceptionlessClient(null);\r\n    }\r\n\r\n    return ExceptionlessClient._instance;\r\n  }\r\n}\r\n\nexport interface IParameter {\r\n  data?:any;\r\n  generic_arguments?:string[];\r\n\r\n  name?:string;\r\n  type?:string;\r\n  type_namespace?:string;\r\n}\r\n\n                                          \r\n\r\nexport interface IMethod {\r\n  data?:any;\r\n  generic_arguments?:string[];\r\n  parameters?:IParameter[];\r\n\r\n  is_signature_target?:boolean;\r\n  declaring_namespace?:string;\r\n  declaring_type?:string;\r\n  name?:string;\r\n  module_id?:number;\r\n}\r\n\n                                    \r\n\r\nexport interface IStackFrame extends IMethod {\r\n  file_name?:string;\r\n  line_number?:number;\r\n  column?:number;\r\n}\r\n\n                                                                                  \r\n\r\nexport interface IInnerError {\r\n  message?:string;\r\n  type?:string;\r\n  code?:string;\r\n  data?:any;\r\n  inner?:IInnerError\r\n  stack_trace?:IStackFrame[];\r\n  target_method?:IMethod;\r\n}\r\n\nexport interface IModule {\r\n  data?:any;\r\n\r\n  module_id?:number;\r\n  name?:string;\r\n  version?:string;\r\n  is_entry?:boolean;\r\n  created_date?:Date;\r\n  modified_date?:Date;\r\n}\r\n\nexport interface IRequestInfo {\r\n  user_agent?:string;\r\n  http_method?:string;\r\n  is_secure?:boolean;\r\n  host?:string;\r\n  port?:number;\r\n  path?:string;\r\n  referrer?:string;\r\n  client_ip_address?:string;\r\n  cookies?:any;\r\n  post_data?:any;\r\n  query_string?:any;\r\n  data?:any\r\n}\r\n\nexport interface IEnvironmentInfo {\r\n  processor_count?:number;\r\n  total_physical_memory?:number;\r\n  available_physical_memory?:number;\r\n  command_line?:string;\r\n  process_name?:string;\r\n  process_id?:string;\r\n  process_memory_size?:number;\r\n  thread_id?:string;\r\n  architecture?:string;\r\n  o_s_name?:string;\r\n  o_s_version?:string;\r\n  ip_address?:string;\r\n  machine_name?:string;\r\n  install_id?:string;\r\n  runtime_version?:string;\r\n  data?:any;\r\n}\r\n\n                                                                                                            \r\n\r\nexport class ConfigurationDefaultsPlugin implements IEventPlugin {\r\n  public priority:number = 10;\r\n  public name:string = 'ConfigurationDefaultsPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    var defaultTags:string[] = context.client.config.defaultTags || [];\r\n    for (var index = 0; index < defaultTags.length; index++) {\r\n      var tag = defaultTags[index];\r\n      if (!!tag && context.event.tags.indexOf(tag) < 0) {\r\n        context.event.tags.push(tag)\r\n      }\r\n    }\r\n\r\n    var defaultData:Object = context.client.config.defaultData || {};\r\n    for (var key in defaultData) {\r\n      if (!!defaultData[key]) {\r\n        context.event.data[key] = defaultData[key];\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                            \r\n\r\nexport class ErrorPlugin implements IEventPlugin {\r\n  public priority:number = 30;\r\n  public name:string = 'ErrorPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const ERROR_KEY:string = '@error'; // optimization for minifier.\r\n\r\n    var exception = context.contextData.getException();\r\n    if (!!exception) {\r\n      context.event.type = 'error';\r\n\r\n      if (!context.event.data[ERROR_KEY]) {\r\n        var parser = context.client.config.errorParser;\r\n        if (!parser) {\r\n          throw new Error('No error parser was defined.');\r\n        }\r\n\r\n        var result = parser.parse(context, exception);\r\n        if (!!result) {\r\n          context.event.data[ERROR_KEY] = result;\r\n        }\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                                                   \r\n\r\nexport class ModuleInfoPlugin implements IEventPlugin {\r\n  public priority:number = 40;\r\n  public name:string = 'ModuleInfoPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const ERROR_KEY:string = '@error'; // optimization for minifier.\r\n\r\n    var collector = context.client.config.moduleCollector;\r\n    if (context.event.data[ERROR_KEY] && !context.event.data['@error'].modules && !!collector) {\r\n      var modules = collector.getModules(context);\r\n      if (modules && modules.length > 0) {\r\n        context.event.data[ERROR_KEY].modules = modules;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                       \r\n\r\nexport class RequestInfoPlugin implements IEventPlugin {\r\n  public priority:number = 60;\r\n  public name:string = 'RequestInfoPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const REQUEST_KEY:string = '@request'; // optimization for minifier.\r\n\r\n    var collector = context.client.config.requestInfoCollector;\r\n    if (!context.event.data[REQUEST_KEY] && !!collector) {\r\n      var requestInfo = collector.getRequestInfo(context);\r\n      if (!!requestInfo) {\r\n        context.event.data[REQUEST_KEY] = requestInfo;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                                                                                               \r\n\r\nexport class EnvironmentInfoPlugin implements IEventPlugin {\r\n  public priority:number = 70;\r\n  public name:string = 'EnvironmentInfoPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    const ENVIRONMENT_KEY:string = '@environment'; // optimization for minifier.\r\n\r\n    var collector = context.client.config.environmentInfoCollector;\r\n    if (!context.event.data[ENVIRONMENT_KEY] && collector) {\r\n      var environmentInfo = collector.getEnvironmentInfo(context);\r\n      if (!!environmentInfo) {\r\n        context.event.data[ENVIRONMENT_KEY] = environmentInfo;\r\n      }\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\n                                                                                                            \r\n\r\nexport class SubmissionMethodPlugin implements IEventPlugin {\r\n  public priority:number = 100;\r\n  public name:string = 'SubmissionMethodPlugin';\r\n\r\n  public run(context:EventPluginContext, next?:() => void): void {\r\n    var submissionMethod:string = context.contextData.getSubmissionMethod();\r\n    if (!!submissionMethod) {\r\n      context.event.data['@submission_method'] = submissionMethod;\r\n    }\r\n\r\n    next && next();\r\n  }\r\n}\r\n\nexport interface IStorageItem<T> {\r\n  created:number;\r\n  path:string;\r\n  value:T;\r\n}\r\n\nexport class SettingsResponse {\r\n  success:boolean = false;\r\n  settings:any;\r\n  settingsVersion:number = -1;\r\n  message:string;\r\n  exception:any;\r\n\r\n  constructor(success:boolean, settings:any, settingsVersion:number = -1, exception:any = null, message:string = null) {\r\n    this.success = success;\r\n    this.settings = settings;\r\n    this.settingsVersion = settingsVersion;\r\n    this.exception = exception;\r\n    this.message = message;\r\n  }\r\n}\r\n\nexport interface IClientConfiguration {\r\n  settings:Object;\r\n  version:number;\r\n}\r\n\n                                                                                                                                                                                                                                                                       \r\n\r\nexport class DefaultErrorParser implements IErrorParser {\r\n  public parse(context:EventPluginContext, exception:Error): IError {\r\n    function getParameters(parameters:string|string[]): IParameter[] {\r\n      var params:string[] = (typeof parameters === 'string' ? [parameters] : parameters) || [];\r\n\r\n      var result:IParameter[] = [];\r\n      for (var index = 0; index < params.length; index++) {\r\n        result.push({ name: params[index] })\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function getStackFrames(context:EventPluginContext, stackFrames:TraceKit.StackFrame[]): IStackFrame[] {\r\n      const ANONYMOUS:string = '<anonymous>';\r\n      var frames:IStackFrame[] = [];\r\n\r\n      for (var index = 0; index < stackFrames.length; index++) {\r\n        var frame = stackFrames[index];\r\n        frames.push({\r\n          name: (frame.func || ANONYMOUS).replace('?', ANONYMOUS),\r\n          parameters: getParameters(frame.args),\r\n          file_name: frame.url,\r\n          line_number: frame.line || 0,\r\n          column: frame.column || 0\r\n        });\r\n      }\r\n\r\n      return frames;\r\n    }\r\n\r\n    const TRACEKIT_STACK_TRACE_KEY:string = '@@_TraceKit.StackTrace'; // optimization for minifier.\r\n\r\n    var stackTrace:TraceKit.StackTrace = !!context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n      ? context.contextData[TRACEKIT_STACK_TRACE_KEY]\r\n      : TraceKit.computeStackTrace(exception, 25);\r\n\r\n    if (!stackTrace) {\r\n      throw new Error('Unable to parse the exceptions stack trace.');\r\n    }\r\n\r\n    return {\r\n      type: stackTrace.name,\r\n      message: stackTrace.message || exception.message,\r\n      stack_trace: getStackFrames(context, stackTrace.stack || [])\r\n    };\r\n  }\r\n}\r\n\n                                                                                                                                                                                                          \r\n\r\nexport class DefaultModuleCollector implements IModuleCollector {\r\n  public getModules(context:EventPluginContext): IModule[] {\r\n    if (document && document.getElementsByTagName) {\r\n      return null;\r\n    }\r\n\r\n    var modules:IModule[] = [];\r\n    var scripts = document.getElementsByTagName('script');\r\n    if (scripts && scripts.length > 0) {\r\n      for (var index = 0; index < scripts.length; index++) {\r\n        if (scripts[index].src) {\r\n          modules.push({\r\n            module_id: index,\r\n            name: scripts[index].src,\r\n            version: Utils.parseVersion(scripts[index].src)\r\n          });\r\n        } else if (!!scripts[index].innerHTML) {\r\n          modules.push({\r\n            module_id: index,\r\n            name: 'Script Tag',\r\n            version: Utils.getHashCode(scripts[index].innerHTML)\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return modules;\r\n  }\r\n}\r\n\n                                                                                                                                                                                                                              \r\n\r\nexport class DefaultRequestInfoCollector implements IRequestInfoCollector {\r\n  public getRequestInfo(context:EventPluginContext): IRequestInfo {\r\n    if (!document || !navigator || !location) {\r\n      return null;\r\n    }\r\n\r\n    var requestInfo:IRequestInfo = {\r\n      user_agent: navigator.userAgent,\r\n      is_secure: location.protocol === 'https:',\r\n      host: location.hostname,\r\n      port: location.port && location.port !== '' ? parseInt(location.port) : 80,\r\n      path: location.pathname,\r\n      //client_ip_address: 'TODO',\r\n      cookies: Utils.getCookies(document.cookie),\r\n      query_string: Utils.parseQueryString(location.search.substring(1))\r\n    };\r\n\r\n    if (document.referrer && document.referrer !== '') {\r\n      requestInfo.referrer = document.referrer;\r\n    }\r\n\r\n    return requestInfo;\r\n  }\r\n}\r\n\nr\n\r\ndeclare var XDomainRequest:{ new (); create(); };\r\n\r\nexport class DefaultSubmissionClient implements ISubmissionClient {\r\n  public configurationVersionHeader:string = 'X-Exceptionless-ConfigVersion';\r\n\r\n  public postEvents(events:IEvent[], config:Configuration, callback:(response:SubmissionResponse) => void):void {\r\n    return this.sendRequest(config, 'POST', '/api/v2/events', Utils.stringify(events, config.dataExclusions), (status:number, message:string, data?:string, headers?:Object) => {\r\n      var settingsVersion:number = headers && parseInt(headers[this.configurationVersionHeader]);\r\n      SettingsManager.checkVersion(settingsVersion, config);\r\n\r\n      callback(new SubmissionResponse(status, message));\r\n    });\r\n  }\r\n\r\n  public postUserDescription(referenceId:string, description:IUserDescription, config:Configuration, callback:(response:SubmissionResponse) => void):void {\r\n    var path = `/api/v2/events/by-ref/${encodeURIComponent(referenceId)}/user-description`;\r\n    return this.sendRequest(config, 'POST', path, Utils.stringify(description, config.dataExclusions), (status:number, message:string, data?:string, headers?:Object) => {\r\n      var settingsVersion:number = headers && parseInt(headers[this.configurationVersionHeader]);\r\n      SettingsManager.checkVersion(settingsVersion, config);\r\n\r\n      callback(new SubmissionResponse(status, message));\r\n    });\r\n  }\r\n\r\n  public getSettings(config:Configuration, callback:(response:SettingsResponse) => void):void {\r\n    return this.sendRequest(config, 'GET', '/api/v2/projects/config', null, (status:number, message:string, data?:string) => {\r\n      if (status !== 200) {\r\n        return callback(new SettingsResponse(false, null, -1, null, message));\r\n      }\r\n\r\n      var settings:IClientConfiguration;\r\n      try {\r\n        settings = JSON.parse(data);\r\n      } catch (e) {\r\n        config.log.error(`Unable to parse settings: '${data}'`);\r\n      }\r\n\r\n      if (!settings || isNaN(settings.version)) {\r\n        return callback(new SettingsResponse(false, null, -1, null, 'Invalid configuration settings.'));\r\n      }\r\n\r\n      callback(new SettingsResponse(true, settings.settings || {}, settings.version));\r\n    });\r\n  }\r\n\r\n  public sendRequest(config:Configuration, method:string, path:string, data:string, callback: (status:number, message:string, data?:string, headers?:Object) => void): void {\r\n    const TIMEOUT:string = 'timeout';  // optimization for minifier.\r\n    const LOADED:string = 'loaded';  // optimization for minifier.\r\n    const WITH_CREDENTIALS:string = 'withCredentials';  // optimization for minifier.\r\n\r\n    var isCompleted:boolean = false;\r\n    var useSetTimeout:boolean = false;\r\n    function complete(mode:string, xhr:XMLHttpRequest) {\r\n      function parseResponseHeaders(headerStr) {\r\n        var headers = {};\r\n        var headerPairs = (headerStr || '').split('\\u000d\\u000a');\r\n        for (var index:number = 0; index < headerPairs.length; index++) {\r\n          var headerPair = headerPairs[index];\r\n          // Can't use split() here because it does the wrong thing\r\n          // if the header value has the string \": \" in it.\r\n          var separator = headerPair.indexOf('\\u003a\\u0020');\r\n          if (separator > 0) {\r\n            headers[headerPair.substring(0, separator)] = headerPair.substring(separator + 2);\r\n          }\r\n        }\r\n\r\n        return headers;\r\n      }\r\n\r\n      if (isCompleted) {\r\n        return;\r\n      }\r\n\r\n      isCompleted = true;\r\n\r\n      var message:string = xhr.statusText;\r\n      var responseText:string = xhr.responseText;\r\n      var status:number = xhr.status;\r\n\r\n      if (mode === TIMEOUT || status === 0) {\r\n        message = 'Unable to connect to server.';\r\n        status = 0;\r\n      } else if (mode === LOADED && !status) {\r\n          status = method === 'POST' ? 202 : 200;\r\n      } else if (status < 200 || status > 299) {\r\n        var responseBody:any = xhr.responseBody;\r\n        if (!!responseBody && !!responseBody.message) {\r\n          message = responseBody.message;\r\n        } else if (!!responseText && responseText.indexOf('message') !== -1) {\r\n          try {\r\n            message =  JSON.parse(responseText).message;\r\n          } catch (e) {\r\n            message = responseText;\r\n          }\r\n        }\r\n      }\r\n\r\n      callback(status || 500, message || '', responseText, parseResponseHeaders(xhr.getAllResponseHeaders && xhr.getAllResponseHeaders()));\r\n    }\r\n\r\n    function createRequest(config:Configuration, method:string, url:string): XMLHttpRequest {\r\n      var xhr:any = new XMLHttpRequest();\r\n      if (WITH_CREDENTIALS in xhr) {\r\n        xhr.open(method, url, true);\r\n\r\n        xhr.setRequestHeader('X-Exceptionless-Client', config.userAgent);\r\n        if (method === 'POST') {\r\n          xhr.setRequestHeader('Content-Type', 'application/json');\r\n        }\r\n      } else if (typeof XDomainRequest != 'undefined') {\r\n        useSetTimeout = true;\r\n        xhr = new XDomainRequest();\r\n        xhr.open(method, location.protocol === 'http:' ? url.replace('https:', 'http:') : url);\r\n      } else {\r\n        xhr = null;\r\n      }\r\n\r\n      if (xhr) {\r\n        xhr.timeout = 10000;\r\n      }\r\n\r\n      return xhr;\r\n    }\r\n\r\n    var url = `${config.serverUrl}${path}?access_token=${encodeURIComponent(config.apiKey)}`;\r\n    var xhr = createRequest(config, method || 'POST', url);\r\n    if (!xhr) {\r\n      return callback(503, 'CORS not supported.');\r\n    }\r\n\r\n    if (WITH_CREDENTIALS in xhr) {\r\n      xhr.onreadystatechange = () => {\r\n        // xhr not ready.\r\n        if (xhr.readyState !== 4) {\r\n          return;\r\n        }\r\n\r\n        complete(LOADED, xhr);\r\n      };\r\n    }\r\n\r\n    xhr.onprogress = () => {};\r\n    xhr.ontimeout = () => complete(TIMEOUT, xhr);\r\n    xhr.onerror = () => complete('error', xhr);\r\n    xhr.onload = () => complete(LOADED, xhr);\r\n\r\n    if (useSetTimeout) {\r\n      setTimeout(() => xhr.send(data), 500);\r\n    } else {\r\n      xhr.send(data);\r\n    }\r\n  }\r\n}\r\n\nr\n\r\nfunction getDefaultsSettingsFromScriptTag(): IConfigurationSettings {\r\n  if (!document || !document.getElementsByTagName) {\r\n    return null;\r\n  }\r\n\r\n  var scripts = document.getElementsByTagName('script');\r\n  for (var index = 0; index < scripts.length; index++) {\r\n    if (scripts[index].src && scripts[index].src.indexOf('/exceptionless') > -1) {\r\n      return Utils.parseQueryString(scripts[index].src.split('?').pop());\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction processUnhandledException(stackTrace:TraceKit.StackTrace, options?:any): void {\r\n  var builder = ExceptionlessClient.default.createUnhandledException(new Error(stackTrace.message || (options || {}).status || 'Script error'), 'onerror');\r\n  builder.pluginContextData['@@_TraceKit.StackTrace'] = stackTrace;\r\n  builder.submit();\r\n}\r\n\r\nfunction processJQueryAjaxError(event, xhr, settings, error:string): void {\r\n  var client = ExceptionlessClient.default;\r\n  if (xhr.status === 404) {\r\n    client.submitNotFound(settings.url);\r\n  } else if (xhr.status !== 401) {\r\n    var err = new Error(error);\r\n    client.createUnhandledException(err, 'JQuery.ajaxError')\r\n      .setSource(settings.url)\r\n      .setProperty('status', xhr.status)\r\n      .setProperty('request', settings.data)\r\n      .setProperty('response', xhr.responseText && xhr.responseText.slice && xhr.responseText.slice(0, 1024))\r\n      .submit();\r\n  }\r\n}\r\n\r\nvar defaults = Configuration.defaults;\r\nvar settings = getDefaultsSettingsFromScriptTag();\r\nif (settings && (settings.apiKey || settings.serverUrl)) {\r\n  defaults.apiKey = settings.apiKey;\r\n  defaults.serverUrl = settings.serverUrl;\r\n}\r\n\r\ndefaults.errorParser = new DefaultErrorParser();\r\ndefaults.moduleCollector = new DefaultModuleCollector();\r\ndefaults.requestInfoCollector = new DefaultRequestInfoCollector();\r\ndefaults.submissionClient = new DefaultSubmissionClient();\r\n\r\nTraceKit.report.subscribe(processUnhandledException);\r\nTraceKit.extendToAsynchronousCallbacks();\r\n\r\nif (typeof $ !== 'undefined' && $(document)) {\r\n  $(document).ajaxError(processJQueryAjaxError);\r\n}\r\n\r\n(<any>Error).stackTraceLimit = Infinity;\r\n\r\ndeclare var $;\r\n\n"],"sourceRoot":"/source/"}